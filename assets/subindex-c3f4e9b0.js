import{C as U,U as M,O as S,S as L,d as I,G as D}from"./utilities-12f405a5.js";class k{static RollString(e){const n=this.Parse(e);var t=this.Roll(n.number,n.type,Math.random);return t.result+=n.modifier,t.result}static Dice(e,n,t){return this.RollMe(e,n,t).result}static Roll(e,n,t){t||(t=Math.random);for(var a=[],r=0,i=0;i<e;i++){var o=0;o=Math.floor(t()*n)+1,r+=o,a.push(o)}return{rolls:a,result:r}}static RollMe(e,n,t){var a="Invalid dice values.",r={};if(typeof e=="string")r=this.Parse(e);else if(typeof e=="number")r={number:this.ValidNumber(e.toString(),a),type:this.ValidNumber(n.toString(),a),modifier:0};else throw new Error(a);typeof n=="function"&&(t=n);var i=this.Roll(r.number,r.type,t);return i.result+=r.modifier,Object.assign(r,i),r}static DetailedRoll(e,n,t){return this.RollMe(e,n,t)}static CompressNotation(e){return e.trim().replace(/\s+/g,"")}static ValidNumber(e,n){let t=Number(e);if(Number.isNaN(t)||!Number.isInteger(t)||t<1)throw new Error(n);return t}static Parse(e){var n=this.CompressNotation(e).match(U.DICENOTATION),t=0,a="Invalid notation: "+e;if(n.length<3)throw new Error(a);if(n[3]&&U.DICEMODIFIER.test(n[3])){var r=n[3].match(U.DICEMODIFIER),i=this.ValidNumber(r[2],a);r[1].trim()==="-"&&(i*=-1),t=i}const o=this.ValidNumber(n[1],a),s=this.ValidNumber(n[2],a);return{number:o,type:s,modifier:t}}}class O{dbImport;currentUnit;freshImport;favorite;userId;open5eApiString="https://api.open5e.com/monsters/?format=json&search=";POPOVERSUBMENUID="";multiSheet=!1;multiActive=[];multiIds=[];constructor(){this.freshImport=!1,this.favorite=!1;const e=window.location.search,n=new URLSearchParams(e),t=n.get("unitid"),a=n.get("multi"),r=n.get("unitactive");a&&r?(this.multiSheet=!0,this.multiIds=t.split(","),this.multiActive=r?.split(","),this.POPOVERSUBMENUID=U.MULTISHEETID,document.documentElement.style.borderColor="deeppink"):(document.getElementById("groupEdit").hidden=!0,this.POPOVERSUBMENUID=t),this.currentUnit=new M(this.POPOVERSUBMENUID,"Default")}async renderUnitInfo(e){this.POPOVERSUBMENUID!=null&&(this.ShowSearchMenu(!1),this.ShowImportJSONMenu(!1),this.ShowSubMenu(!0),S.onReady(async()=>{const n=await S.theme.getTheme();L(n,e),S.theme.onChange(l=>{L(l,e)}),this.userId=await S.player.getId(),!this.freshImport&&!this.multiSheet&&await this.currentUnit.ImportFromDatabase(this.POPOVERSUBMENUID),this.freshImport=!1;let t="";t='<div class="description">',t+=`<span id="formUnitSize" contentEditable="true">${this.currentUnit.unitSize}</span> `,t+=`<span id="formAlignment" contentEditable="true">${this.currentUnit.alignment}</span> `,t+=`<span id="formUnitType" contentEditable="true">${this.currentUnit.unitType}</span>`,t+="</div>";let a=`<div><span class="bold red">Hit Points </span><span id="formMaxHP" contentEditable="true">${this.currentUnit.maxHP}</span>
                            <span class="floatright"><span class="bold red">Armor Class </span><span id="formArmorClass" contentEditable="true">${this.currentUnit.armorClass}</span></span></div>`,r=`<div><span class="bold red">Speed</span>  <span class="floatright"><img class ="Icon" src="/speedwalk.svg"> <span id="formSpeedWalk" contentEditable="true">${this.currentUnit.speedWalk}</span> 
                <img class ="Icon" src="/speedswim.svg"> <span id="formSpeedSwim" contentEditable="true">${this.currentUnit.speedSwim}</span> 
                <img class ="Icon" src="/speedburrow.svg"> <span id="formSpeedBurrow" contentEditable="true">${this.currentUnit.speedBurrow}</span> 
                <img class ="Icon" src="/speedclimb.svg"> <span id="formSpeedClimb" contentEditable="true">${this.currentUnit.speedClimb}</span> 
                <img class ="Icon" src="/speedfly.svg"> <span id="formSpeedFly" contentEditable="true">${this.currentUnit.speedFly}</span></span></div>`,i="<table>";i+='<tr class="red"><th>STR    </th><th>DEX   </th><th>CON    </th><th>INT   </th><th>WIS   </th><th>CHA   </th></tr>',i+=`<tr><td><div class="rollableScore" data-name="Strength"><span id="formStrScore" contentEditable="true">${this.currentUnit.strScore}</span></div></td>
                            <td><div class="rollableScore" data-name="Dexterity"><span id="formDexScore" contentEditable="true">${this.currentUnit.dexScore}</span></div></td>
                            <td><div class="rollableScore" data-name="Constitution"><span id="formConScore" contentEditable="true">${this.currentUnit.conScore}</span></div></td>
                            <td><div class="rollableScore" data-name="Intelligence"><span id="formIntScore" contentEditable="true">${this.currentUnit.intScore}</span></div></td>
                            <td><div class="rollableScore" data-name="Wisdom"><span id="formWisScore" contentEditable="true">${this.currentUnit.wisScore}</span></div></td>
                            <td><div class="rollableScore" data-name="Charisma"><span id="formChaScore" contentEditable="true">${this.currentUnit.chaScore}</span></div></td></tr>`,i+="</table>";let o='<div class="center red bold">Saving Throws</div><table>';o+=`<tr><td><div class="rollableSave" data-name="Strength Save"><span id="formStrSave" contentEditable="true">${this.currentUnit.strSave}</span></div></td>
                            <td><div class="rollableSave" data-name="Dexterity Save"><span id="formDexSave" contentEditable="true">${this.currentUnit.dexSave}</span></div></td>
                            <td><div class="rollableSave" data-name="Constitution Save"><span id="formConSave" contentEditable="true">${this.currentUnit.conSave}</span></div></td>
                            <td><div class="rollableSave" data-name="Intelligence Save"><span id="formIntSave" contentEditable="true">${this.currentUnit.intSave}</span></div></td>
                            <td><div class="rollableSave" data-name="Wisdom Save"><span id="formWisSave" contentEditable="true">${this.currentUnit.wisSave}</span></div></td>
                            <td><div class="rollableSave" data-name="Charisma Save"><span id="formChaSave" contentEditable="true">${this.currentUnit.chaSave}</span></div></td></tr>`,o+="</table>";let s=`<div><span class="bold">Senses </span><span id="formSenses" contentEditable="true">${this.currentUnit.senses}</span></div>`,v=`<div><span class="bold">Languages </span><span id="formLanguages" contentEditable="true">${this.currentUnit.languages}</span></div>`,N=`<div><span class="bold">Challenge </span>
                <span id="formChallengeRating" contentEditable="true">${this.currentUnit.challengeRating}</span>
                (<span id="formEXP" contentEditable="true">${this.currentUnit.experiencePoints}</span> EXP)</div>`,f=`<div><span class="bold">Immunity </span><span id="formImmune" contentEditable="true">${this.currentUnit.damageImmunities}</span></div>`,C=`<div><span class="bold">Resistance </span><span id="formResist" contentEditable="true">${this.currentUnit.damageResistances}</span></div>`,$=`<div><span class="bold">Vulnerable </span><span id="formVulnerable" contentEditable="true">${this.currentUnit.damageVulnerabilities}</span></div>`,m=`<div><span class="bold">Status Immune </span><span id="formConditions" contentEditable="true">${this.currentUnit.conditionImmunities}</span></div>`,c='<div id="formAbilityCollection">';if(this.currentUnit.specialAbilities&&this.currentUnit.specialAbilities?.length>0)for(let l of this.currentUnit.specialAbilities)c+='<div id="formAbilityContainer" class="Ability">',c+=`<span id="formAbilityName" class="abilityname" contentEditable="true">${l.name}</span>.  `,c+=`<span id="formAbilityDesc" class="description" contentEditable="true">${this.SetClassOnRollable(l.desc)}</span>`,c+="</div>";c+="</div>";let d='<div id="formAttackCollection">';if(this.currentUnit.standardActions&&this.currentUnit.standardActions?.length>0)for(let l of this.currentUnit.standardActions)d+='<div id="formAttackContainer" class="attack">',d+=`<span id="formAttackName" class="attackname" contentEditable="true">${l.name}</span>.  `,d+=`<span id="formAttackDesc" class="description" contentEditable="true">${this.SetClassOnRollable(l.desc)}</span>`,d+="</div>";d+="</div>";let u="";if(this.currentUnit.reactions&&this.currentUnit.reactions?.length>0){u+='<div id="formReactionCollection"><div class="actions red">Reactions</div><div class="hr"></div>';for(let l of this.currentUnit.reactions)u+='<div id="formReactionContainer" class="Reaction">',u+=`<span id="formReactionName" class="reactionname">${l.name}</span>.  `,u+=`<span id="formReactionDesc" class="description">${this.SetClassOnRollable(l.desc)}</span>`,u+="</div>";u+="</div>"}let p="";if(this.currentUnit.legendaryActions&&this.currentUnit.legendaryActions?.length>0){p+='<div id="formLegendaryCollection"><div class="actions red">Legendary Actions</div><div class="hr"></div>';for(let l of this.currentUnit.legendaryActions)p+='<div id="formLegendaryContainer" class="Legendary">',p+=`<span id="formLegendaryName" class="legendaryname">${l.name}</span>.  `,p+=`<span id="formLegendaryDesc" class="description">${this.SetClassOnRollable(l.desc)}</span>`,p+="</div>";p+="</div>"}let A='<div id="formSpellCollection">';if(this.currentUnit.spellActions&&this.currentUnit.spellActions?.length>0)for(let l of this.currentUnit.spellActions)A+='<div id="formSpellContainer" class="attack">',A+=`<span id="formSpellName" class="attackname" contentEditable="true">${l.name}</span>.  `,A+=`<span id="formSpellDesc" class="description" contentEditable="true">${this.SetClassOnRollable(l.desc)}</span>`,A+="</div>";A+="</div>",e.querySelector("#submenu").innerHTML=`
            <div class="headline"><span id="formUnitName" class="name" contentEditable="true">${this.currentUnit.unitName}</span><span id="buttonContainer" class="floatright"></span></div>
            ${t}
            <div class="gradient"></div>
            ${a}
            ${r}
            <div class="gradient"></div>
            ${i}
            <div class="hr"></div>
            ${o}
            <div class="gradient"></div>
            ${s}
            ${v}
            ${N}
            <div class="gradient"></div>
            ${$}
            ${C}
            ${f}
            ${m}
            <div class="actions red">Abilities<span id="addAbilityButtonContainer" class="floatright"></span></div>
            <div class="hr"></div>
            ${c}
            <div class="actions red">Actions<span id="addAttackButtonContainer" class="floatright"></span></div>
            <div class="hr"></div>
            ${d}
            ${u}
            ${p}
            <div class="actions red">Spell List<span id="addSpellButtonContainer" class="floatright"></span></div>
            <div class="hr"></div>
            ${A}
            </div>
            <footer id="footerButtonContainer">
            </footer>
           `,e.querySelectorAll("[contenteditable=true]").forEach(l=>{l.addEventListener("keypress",function(h){h.key==="Enter"&&h.preventDefault()})}),this.AppendFavoriteButton(),this.AppendCollectionSaveButton(),this.AppendUnitExportButton(),this.AppendUnitSaveButton(),this.AppendAddActionButtons(),this.AppendImportUnitButton(),this.AppendJSONButton(),e.querySelectorAll(".clickableRollerDmg").forEach(l=>{l.addEventListener("click",async h=>{let b=l?.parentElement?.previousElementSibling?.textContent;if(b=b||"<Nameless>",h&&h.currentTarget){h.preventDefault();const g=h.currentTarget;g.parentElement?.blur();const E=`${this.currentUnit.unitName} used ${b} and rolled ${g.textContent} for ... ${k.RollString(g.textContent)}!`;return this.SendtoChatLog(E),await S.notification.show(E)}return null})}),e.querySelectorAll(".clickableRollerAtk").forEach(l=>{l.addEventListener("click",async h=>{let b=l?.parentElement?.previousElementSibling?.textContent;if(b=b||"<Nameless>",h&&h.currentTarget){h.preventDefault();const g=h.currentTarget;g.parentElement?.blur();let E=g.textContent?.replace(/[()]/g,"");const B=Number(E?.substring(1)),x=B==0?"(1d20)":`(1d20 + ${B})`;console.log(B);const R=`${this.currentUnit.unitName} used ${b} and rolled ${g.textContent} for ... ${k.RollString(x)} to hit!`;return this.SendtoChatLog(R),await S.notification.show(R)}return null})}),e.querySelectorAll(".rollableScore").forEach(l=>{l.addEventListener("click",async h=>{const b=l.dataset.name;if(h&&h.currentTarget&&l.firstChild){const g=Math.floor((Number(l.firstChild?.textContent)-10)/2);let E=g==0?"(1d20)":`(1d20 + ${g})`;h.preventDefault();const B=`${this.currentUnit.unitName} rolled ${b} ${E} for ... ${k.RollString(E)}!`;return this.SendtoChatLog(B),await S.notification.show(B)}return null})}),e.querySelectorAll(".rollableSave").forEach(l=>{l.addEventListener("click",async h=>{const b=l.dataset.name;if(h&&h.currentTarget&&l.firstChild){const g=Number(l.firstChild?.textContent);let E=g==0?"(1d20)":`(1d20 + ${g})`;h.preventDefault();const B=`${this.currentUnit.unitName} rolled ${b} ${E} for ... ${k.RollString(E)}!`;return this.SendtoChatLog(B),await S.notification.show(B)}return null})})}))}async renderSearchForm(e){const n="♥";var t=this;e.querySelector("#searchmenu").innerHTML=`
            <div id="searchResultsContainer"><ul id="monsterList"><div class="superCenter">No favorites to show.</div></ul></div>
            <footer></span><span class="returnFloatRight" id="searchFooterButtonContainer"></span></footer>
           `;let a=await I.Creatures.filter(f=>f.favorite==!0).toArray();if(a=a.sort((f,C)=>f.unitName.localeCompare(C.unitName)),a.length>0){const f=e.querySelector("#monsterList");let C="";a.forEach(c=>{const d=c.favorite?n:"",u=e.createElement("input");u.type="button",u.id=`${c.id}`,u.className="collectionImportButtonConfirm",u.value="Import",u.title=`Import ${c.unitName} onto this Unit`;const p=e.createElement("input");p.type="button",p.id=`del-${c.id}`,p.className="removeCollectionButtonConfirm",p.value="⨉",p.title=`Remove ${c.unitName} from Collection`,C+=`<li id="listItem-${c.id}" style="--tooltip-color:${N(c.dataSlug)}" data-tag="🡆 from [Collection] User:${c.dataSlug}"><div class="monsterNameList">${d} ${v(c.unitName)}</div><div class="monsterImportButtonContainer">${p.outerHTML} ${u.outerHTML}</div></li>`}),f.innerHTML=C,e.querySelectorAll(".collectionImportButtonConfirm").forEach(c=>{c.addEventListener("click",async d=>await t.ImportCollectionMonsterInfo(d.currentTarget.id))}),e.querySelectorAll(".removeCollectionButtonConfirm").forEach(c=>{c.addEventListener("click",async d=>await t.DeleteCollectionMonsterInfo(d.currentTarget.id))})}const r=e.getElementById("searchFooterButtonContainer"),i=e.createElement("input");i.type="button",i.id="returnButton",i.className="chalkBorder",i.style.marginRight="4px",i.title="Go back to Unit Information",i.value="Return",i.onclick=async function(){t.ShowSearchMenu(!1),t.ShowSubMenu(!0)};const o=e.createElement("input");o.type="search",o.id="searchValue",o.className="textInput",o.title="Type a value to filter monsters by";const s=e.createElement("input");s.type="button",s.id="searchConfirm",s.value="Search",s.className="chalkBorder",s.style.marginLeft="4px",s.title="Click to send Search",s.onclick=async function(){const f=e.querySelector("#monsterList");f.innerHTML='<div class="superCenter">Searching...</div>';let C="";await fetch(`${t.open5eApiString}${o.value}`).then(function(m){return m.json()}).then(function(m){m.count>0&&m.results.forEach(c=>{const d=e.createElement("input");d.type="button",d.id=`${c.slug}`,d.className="monsterImportButtonConfirm",d.value="Import",d.title=`Import ${c.name} onto this Unit`,C+=`<li style="--tooltip-color:${N(c.document__slug)}" data-tag="🡆 from ${c.document__slug}"><div class="monsterNameList">${v(c.name)}</div><div class="monsterImportButtonContainer">${d.outerHTML}</div></li>`})});const $=await I.Creatures.filter(m=>m.unitName.toLowerCase().includes(o.value.toLocaleLowerCase())).toArray();$.length>0&&$.forEach(m=>{const c=m.favorite?n:"",d=e.createElement("input");d.type="button",d.id=`${m.id}`,d.className="collectionImportButtonConfirm",d.value="Import",d.title=`Import ${m.unitName} onto this Unit`;const u=e.createElement("input");u.type="button",u.id=`del-${m.id}`,u.className="removeCollectionButtonConfirm",u.value="⨉",u.title=`Remove ${m.unitName} from Collection`,C+=`<li id="listItem-${m.id}" style="--tooltip-color:${N(m.dataSlug)}" data-tag="🡆 from [Collection] User:${m.dataSlug}"><div class="monsterNameList">${c} ${v(m.unitName)}</div><div class="monsterImportButtonContainer">${u.outerHTML} ${d.outerHTML}</div></li>`}),C!="Searching..."?(f.innerHTML=C,e.querySelectorAll(".monsterImportButtonConfirm").forEach(u=>{u.addEventListener("click",async p=>await t.ImportNewMonsterInfo(p.currentTarget.id))}),e.querySelectorAll(".collectionImportButtonConfirm").forEach(u=>{u.addEventListener("click",async p=>await t.ImportCollectionMonsterInfo(p.currentTarget.id))}),e.querySelectorAll(".removeCollectionButtonConfirm").forEach(u=>{u.addEventListener("click",async p=>await t.DeleteCollectionMonsterInfo(p.currentTarget.id))})):f.innerHTML="<div class='Nothing'>No results found.</div>"},r?.append(i),r?.append(o),r?.append(s);function v(f){return f.length>30?f.substring(0,30)+"...":f}function N(f){if(!f||f==="")return"white";switch(f.substring(0,1).toLowerCase()){case"a":case"e":case"i":case"o":case"u":return"red";case"b":case"c":case"d":return"pink";case"f":case"g":case"h":return"cyan";case"j":case"k":case"l":case"m":return"#747bff";case"n":case"p":case"q":return"green";case"r":case"s":case"t":case"v":return"orange";case"w":case"x":case"y":case"z":return"yellow";default:return"white"}}}async renderCustomImportForm(e){var n=this;e.querySelector("#importjsonmenu").innerHTML=`
            <h2>Import Custom JSON</h2>
            <div id="importDataContainer"></div>
            <div class="hr"></div>
            <div class = "red" id="exampleLine>Example Input</div>
            <div id="instructionsContainer"></div>
            <h3>Formatting Help</h3>
            ${this.exampleInterfaceString()}
            <div class="hr"></div>
            <h3>Sub Types</h3>
            ${this.exampleTypesString()}
            <footer><span id="importReturnContainer"></span><span id="importFooterButtonContainer"></span></footer>
           `;const t=e.getElementById("importDataContainer"),a=e.getElementById("importReturnContainer"),r=e.getElementById("importFooterButtonContainer"),i=e.createElement("input");i.type="button",i.id="returnButton",i.className="chalkBorder",i.style.marginRight="4px",i.title="Go back to Unit Information",i.value="Return",i.onclick=async function(){n.ShowImportJSONMenu(!1),n.ShowSubMenu(!0)};const o=e.createElement("textarea");o.id="customJsonValueBox",o.className="",o.title="Type custom monster information here";const s=e.createElement("input");s.type="button",s.id="importConfirm",s.value="Confirm Import",s.className="chalkBorder",s.style.marginLeft="4px",s.title="Click to import custom data",s.onclick=async function(){const v=o.value;try{y.freshImport=!0,y.currentUnit.ImportFromJSON(v),y.renderUnitInfo(e)}catch(N){alert(`The import failed - ${N}`)}},a?.append(i),t?.append(o),r?.append(s)}exampleInterfaceString(){return`Below are the type definitions for importing.</br>
        If you need an easier example, click Export on an existing Unit and change the values.</br>
        When adding clickable dice rolls, the format is '(#d#+#)' ex; (2d6+2)</br>
        If it's detected in an Action description, it should create a roller button.</br></br>
        <b>CustomEntity</b> </br>
        {</br>
            unitName: string;</br> 
            initiative: number;</br> 
            currentHP: number;</br> 
            maxHP: number;</br> 
            armorClass: number;</br> 
        
            unitType: string;</br> 
            unitSize: string;</br> 
        
            strScore: number;</br> 
            strSave: number;</br> 
        
            dexScore: number;</br> 
            dexSave: number;</br> 
        
            conScore: number;</br> 
            conSave: number;</br> 
        
            intScore: number;</br> 
            intSave: number;</br> 
        
            wisScore: number;</br> 
            wisSave: number;</br> 
        
            chaScore: number;</br> 
            chaSave: number;</br> 
        
            damageVulnerabilities: string;</br> 
            damageImmunities: string;</br> 
            damageResistances: string;</br> 
            conditionImmunities: string;</br> 
        
            challengeRating: string;</br> 
            experiencePoints: number;</br> 
            alignment: string;</br> 
        
            standardActions: ActionsEntity[];</br> 
            legendaryActions?: ActionsEntity[];</br> 
            specialAbilities?: ActionsEntity[];</br> 
            spellActions?: ActionsEntity[];</br> 
            reactions?: ActionsEntity[];</br> 
        
            senses: string;</br> 
            languages: string;</br> 
        
            speedWalk: number;</br> 
            speedFly: number;</br> 
            speedClimb: number;</br> 
            speedBurrow: number;</br> 
            speedSwim: number;</br> 

            dataSlug: string;</br>
        }`}exampleTypesString(){return`      
        <b>ActionsEntity</b> </br>
        {   name?: string;</br>
          desc?: string;</br>   }</br>
        `}AppendImportUnitButton(){var e=this;const n=document.getElementById("footerButtonContainer"),t=document.createElement("input");t.type="button",t.id="gotoMonsterSearchButton",t.value="Search Monster Data",t.className="chalkBorder",t.style.marginRight="4px",t.title="Search Monster Data from Free Open5e",t.onclick=async function(){e.ShowSubMenu(!1),e.ShowSearchMenu(!0),e.renderSearchForm(document)},n?.appendChild(t)}AppendJSONButton(){var e=this;const n=document.getElementById("footerButtonContainer"),t=document.createElement("input");t.type="button",t.id="gotoImportMonsterButton",t.value="Import Custom JSON",t.className="chalkBorder",t.style.marginLeft="4px",t.title="Import Custom Monster JSON Data",t.onclick=async function(){e.ShowSubMenu(!1),e.ShowImportJSONMenu(!0),e.renderCustomImportForm(document)},n?.appendChild(t)}AppendUnitSaveButton(){var e=this;const n=document.getElementById("buttonContainer"),t=document.createElement("input");t.type="image",t.id="saveButton",t.className="clickable",t.onclick=async function(){if(e.currentUnit.ImportCustomFormInputs(document),e.multiSheet){const i=e.currentUnit.unitName;let o=[];for(var a=0,r;r=e.multiIds[a];a++){e.currentUnit.id=r,e.currentUnit.tokenId=r,e.currentUnit.isActive=e.multiActive[a]==="true"?1:0,e.currentUnit.unitName=i+` ${String.fromCharCode("A".charCodeAt(0)+a)}`;const s=JSON.stringify(e.currentUnit),v=JSON.parse(s);o.push(v)}await S.scene.items.updateItems(s=>s.id===o.find(v=>v.id===s.id)?.id,s=>{for(let v of s)v.text.plainText=o.find(N=>N.id===v.id).unitName}),await I.ActiveEncounter.bulkPut(o)}else await I.ActiveEncounter.put(e.currentUnit,e.POPOVERSUBMENUID),console.log(S.isReady),await S.scene.items.updateItems(i=>i.id==e.currentUnit.id,i=>{for(let o of i)o.text.plainText=e.currentUnit.unitName})},t.src="/save.svg",t.title="Save Changes",t.height=20,t.width=20,n?.appendChild(t)}AppendFavoriteButton(){var e=this;const n=document.getElementById("buttonContainer"),t=document.createElement("input");t.type="image",t.id="favoriteButton",t.value="false",t.className="clickable",t.onclick=async function(){const a=document.getElementById("collectionButton");t.value=="false"?(t.value="true",t.src="/favorite.svg",t.className="clickable favorite",a.className="clickable favorite",a.title="Save to Collection & Favorite",e.favorite=!0):(t.value="false",t.src="/favoriteline.svg",t.className="clickable",a.className="clickable",a.title="Save to Collection",e.favorite=!1)},t.src="/favoriteline.svg",t.title="Toggle Favorite on Export",t.height=20,t.width=20,n?.appendChild(t)}AppendCollectionSaveButton(){var e=this;const n=document.getElementById("buttonContainer"),t=document.createElement("input");t.type="image",t.id="collectionButton",t.className="clickable",t.onclick=async function(){e.currentUnit.ImportCustomFormInputs(document);const a=await S.player.getName();let r=JSON.parse(JSON.stringify(e.currentUnit));r.id="",r.tokenId="",r.dataSlug=a;const i=await I.Creatures.get({unitName:e.currentUnit.unitName,dataSlug:a});if(i)confirm(`Unit named '${e.currentUnit.unitName}' already found in Collection. Overwrite?`)&&(r.id=i.id,r.favorite=e.favorite,await I.Creatures.put(r,i.id));else{const o=D();r.id=o,r.favorite=e.favorite,await I.Creatures.put(r,o)}},t.src="/collection.svg",t.title="Save to Collection",t.height=20,t.width=20,n?.appendChild(t)}AppendUnitExportButton(){var e=this;const n=document.getElementById("buttonContainer"),t=document.createElement("input");t.type="image",t.id="exportButton",t.className="clickable",t.onclick=async function(){e.currentUnit.ImportCustomFormInputs(document),e.currentUnit.id="",e.currentUnit.tokenId="";try{await navigator.clipboard.writeText(JSON.stringify(e.currentUnit)),window.alert("JSON Copied to clipboard.")}catch{window.alert("Unable to copy; Please try again.")}},t.src="/export.svg",t.title="Export to JSON",t.height=20,t.width=20,n?.appendChild(t)}AppendAddActionButtons(){const e=document.getElementById("addAttackButtonContainer"),n=document.createElement("input");n.type="image",n.id="addButton",n.title="Add new Attack",n.className="clickable",n.onclick=async function(){const o=document.getElementById("formAttackCollection"),s=`<div id="formAttackContainer" class="attack"><span id="formAttackName" class="attackname" contentEditable="true">Atk-Name.</span>.
                <span id="formAttackDesc" class="description" contentEditable="true">Atk-Desc</span></div>`;o.insertAdjacentHTML("beforeend",s)},n.src="/add.svg",n.height=20,n.width=20,e?.appendChild(n);const t=document.getElementById("addAbilityButtonContainer"),a=document.createElement("input");a.type="image",a.id="addButton",a.className="clickable",a.title="Add new Ability",a.onclick=async function(){const o=document.getElementById("formAbilityCollection"),s=`<div id="formAbilityContainer" class="ability"><span id="formAbilityName" class="abilityname" contentEditable="true">Act-Name.</span>.
                <span id="formAbilityDesc" class="description" contentEditable="true">Act-Desc</span></div>`;o.insertAdjacentHTML("beforeend",s)},a.src="/add.svg",a.height=20,a.width=20,t?.appendChild(a);const r=document.getElementById("addSpellButtonContainer"),i=document.createElement("input");i.type="image",i.id="addButton",i.title="Add new Spell",i.className="clickable",i.onclick=async function(){const o=document.getElementById("formSpellCollection"),s=`<div id="formSpellContainer" class="spell"><span id="formSpellName" class="spellname" contentEditable="true">Spell-Name.</span>.
                <span id="formSpellDesc" class="description" contentEditable="true">Spell-Desc</span></div>`;o.insertAdjacentHTML("beforeend",s)},i.src="/add.svg",i.height=20,i.width=20,r?.appendChild(i)}ShowSubMenu(e){const n=document.querySelector("#submenu");n.hidden=!e}ShowSearchMenu(e){const n=document.querySelector("#searchmenu");n.hidden=!e}ShowImportJSONMenu(e){const n=document.querySelector("#importjsonmenu");n.hidden=!e}async ImportNewMonsterInfo(e){await fetch(`https://api.open5e.com/monsters/${e}/?format=json`).then(function(n){return n.json()}).then(async function(n){let t=new M(y.POPOVERSUBMENUID);const a=document.querySelector("#monsterList");a.innerHTML='<div class="superCenter">Loading...</div>',await t.ImportOpen5eResponse(n),t.isActive=y.currentUnit.isActive,t.currentHP=t.maxHP,y.freshImport=!0,y.currentUnit=t,y.renderUnitInfo(document)})}async ImportCollectionMonsterInfo(e){const n=await I.Creatures.get(e);n&&(y.freshImport=!0,y.currentUnit.SetToModel(n),y.renderUnitInfo(document))}async DeleteCollectionMonsterInfo(e){const n=e.substring(4);await I.Creatures.delete(n),document.getElementById(`listItem-${n}`)?.remove()}SetClassOnRollable(e){let n="";return n=e.replaceAll(U.PARENTHESESMATCH,"<span class='clickableRollerDmg' contenteditable='false'>($1)</span>"),n=n.replaceAll(U.PLUSMATCH,"<span class='clickableRollerAtk' contenteditable='false'> $1 </span>"),n}async SendtoChatLog(e){const t=(await I.Settings.get(U.SETTINGSID))?.gmRumbleLog?this.userId:"0000",a=new Date().toISOString(),r={};return r[`${U.EXTENSIONID}/metadata_chatlog`]={chatlog:e,sender:"Clash!",targetId:t,created:a,color:"#ff9294"},await S.scene.setMetadata(r)}}const y=new O;y.renderUnitInfo(document);
