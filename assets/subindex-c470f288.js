import{C as A,U as M,O as y,S as T,d as B,G as O}from"./utilities-8a6245a3.js";class k{static RollString(t){const n=this.Parse(t);var e=this.Roll(n.number,n.type,Math.random);return e.result+=n.modifier,e.result}static Dice(t,n,e){return this.RollMe(t,n,e).result}static Roll(t,n,e){e||(e=Math.random);for(var i=[],r=0,a=0;a<t;a++){var l=0;l=Math.floor(e()*n)+1,r+=l,i.push(l)}return{rolls:i,result:r}}static RollMe(t,n,e){var i="Invalid dice values.",r={};if(typeof t=="string")r=this.Parse(t);else if(typeof t=="number")r={number:this.ValidNumber(t.toString(),i),type:this.ValidNumber(n.toString(),i),modifier:0};else throw new Error(i);typeof n=="function"&&(e=n);var a=this.Roll(r.number,r.type,e);return a.result+=r.modifier,Object.assign(r,a),r}static DetailedRoll(t,n,e){return this.RollMe(t,n,e)}static CompressNotation(t){return t.trim().replace(/\s+/g,"")}static ValidNumber(t,n){let e=Number(t);if(Number.isNaN(e)||!Number.isInteger(e)||e<1)throw new Error(n);return e}static Parse(t){var n=this.CompressNotation(t).match(A.DICENOTATION),e=0,i="Invalid notation: "+t;if(n.length<3)throw new Error(i);if(n[3]&&A.DICEMODIFIER.test(n[3])){var r=n[3].match(A.DICEMODIFIER),a=this.ValidNumber(r[2],i);r[1].trim()==="-"&&(a*=-1),e=a}const l=this.ValidNumber(n[1],i),d=this.ValidNumber(n[2],i);return{number:l,type:d,modifier:e}}}class P{dbImport;currentUnit;freshImport;favorite;userId;open5eApiString="https://api.open5e.com/monsters/?format=json&search=";POPOVERSUBMENUID="";multiSheet=!1;multiActive=[];multiIds=[];importReturnContainer;importBarContainer;searchBarContainer;mainFooterContainer;constructor(){this.freshImport=!1,this.favorite=!1,this.importReturnContainer=document.getElementById("importReturnContainer"),this.importBarContainer=document.getElementById("importFooterButtonContainer"),this.searchBarContainer=document.getElementById("searchFooterButtonContainer"),this.mainFooterContainer=document.getElementById("mainFooterContainer");const t=window.location.search,n=new URLSearchParams(t),e=n.get("unitid"),i=n.get("multi"),r=n.get("unitactive");i&&r?(this.multiSheet=!0,this.multiIds=e.split(","),this.multiActive=r?.split(","),this.POPOVERSUBMENUID=A.MULTISHEETID,document.documentElement.style.borderColor="deeppink",document.querySelectorAll("#submenu, #searchmenu, #importjsonmenu").forEach(l=>{l.style.height="90%"})):(document.getElementById("groupEdit").hidden=!0,this.POPOVERSUBMENUID=e),this.currentUnit=new M(this.POPOVERSUBMENUID,"Default")}async renderUnitInfo(t){this.POPOVERSUBMENUID!=null&&(this.ShowSearchMenu(!1),this.ShowImportJSONMenu(!1),this.ShowSubMenu(!0),y.onReady(async()=>{const n=await y.theme.getTheme();T(n,t),y.theme.onChange(o=>{T(o,t)}),this.userId=await y.player.getId(),!this.freshImport&&!this.multiSheet&&await this.currentUnit.ImportFromDatabase(this.POPOVERSUBMENUID),this.freshImport=!1;let e="";e='<div class="description">',e+=`<span id="formUnitSize" contentEditable="true">${this.currentUnit.unitSize}</span> `,e+=`<span id="formAlignment" contentEditable="true">${this.currentUnit.alignment}</span> `,e+=`<span id="formUnitType" contentEditable="true">${this.currentUnit.unitType}</span>`,e+="</div>";let i=`<div><span class="bold red">Hit Points </span><span id="formMaxHP" contentEditable="true">${this.currentUnit.maxHP}</span>
                            <span class="floatright"><span class="bold red">Armor Class </span><span id="formArmorClass" contentEditable="true">${this.currentUnit.armorClass}</span></span></div>`,r=`<div><span class="bold red">Speed</span>  <span class="floatright"><img class ="Icon" src="/speedwalk.svg"> <span id="formSpeedWalk" contentEditable="true">${this.currentUnit.speedWalk}</span> 
                <img class ="Icon" src="/speedswim.svg"> <span id="formSpeedSwim" contentEditable="true">${this.currentUnit.speedSwim}</span> 
                <img class ="Icon" src="/speedburrow.svg"> <span id="formSpeedBurrow" contentEditable="true">${this.currentUnit.speedBurrow}</span> 
                <img class ="Icon" src="/speedclimb.svg"> <span id="formSpeedClimb" contentEditable="true">${this.currentUnit.speedClimb}</span> 
                <img class ="Icon" src="/speedfly.svg"> <span id="formSpeedFly" contentEditable="true">${this.currentUnit.speedFly}</span></span></div>`,a="<table>";a+='<tr class="red"><th>STR    </th><th>DEX   </th><th>CON    </th><th>INT   </th><th>WIS   </th><th>CHA   </th></tr>',a+=`<tr><td><div class="rollableScore" data-name="Strength"><span id="formStrScore" contentEditable="true">${this.currentUnit.strScore}</span></div></td>
                            <td><div class="rollableScore" data-name="Dexterity"><span id="formDexScore" contentEditable="true">${this.currentUnit.dexScore}</span></div></td>
                            <td><div class="rollableScore" data-name="Constitution"><span id="formConScore" contentEditable="true">${this.currentUnit.conScore}</span></div></td>
                            <td><div class="rollableScore" data-name="Intelligence"><span id="formIntScore" contentEditable="true">${this.currentUnit.intScore}</span></div></td>
                            <td><div class="rollableScore" data-name="Wisdom"><span id="formWisScore" contentEditable="true">${this.currentUnit.wisScore}</span></div></td>
                            <td><div class="rollableScore" data-name="Charisma"><span id="formChaScore" contentEditable="true">${this.currentUnit.chaScore}</span></div></td></tr>`,a+="</table>";let l='<div class="center red bold">Saving Throws</div><table>';l+=`<tr><td><div class="rollableSave" data-name="Strength Save"><span id="formStrSave" contentEditable="true">${this.currentUnit.strSave}</span></div></td>
                            <td><div class="rollableSave" data-name="Dexterity Save"><span id="formDexSave" contentEditable="true">${this.currentUnit.dexSave}</span></div></td>
                            <td><div class="rollableSave" data-name="Constitution Save"><span id="formConSave" contentEditable="true">${this.currentUnit.conSave}</span></div></td>
                            <td><div class="rollableSave" data-name="Intelligence Save"><span id="formIntSave" contentEditable="true">${this.currentUnit.intSave}</span></div></td>
                            <td><div class="rollableSave" data-name="Wisdom Save"><span id="formWisSave" contentEditable="true">${this.currentUnit.wisSave}</span></div></td>
                            <td><div class="rollableSave" data-name="Charisma Save"><span id="formChaSave" contentEditable="true">${this.currentUnit.chaSave}</span></div></td></tr>`,l+="</table>";let d=`<div><span class="bold">Senses </span><span id="formSenses" contentEditable="true">${this.currentUnit.senses}</span></div>`,g=`<div><span class="bold">Languages </span><span id="formLanguages" contentEditable="true">${this.currentUnit.languages}</span></div>`,s=`<div><span class="bold">Challenge </span>
                <span id="formChallengeRating" contentEditable="true">${this.currentUnit.challengeRating}</span>
                (<span id="formEXP" contentEditable="true">${this.currentUnit.experiencePoints}</span> EXP)</div>`,p=`<div><span class="bold">Immunity </span><span id="formImmune" contentEditable="true">${this.currentUnit.damageImmunities}</span></div>`,v=`<div><span class="bold">Resistance </span><span id="formResist" contentEditable="true">${this.currentUnit.damageResistances}</span></div>`,h=`<div><span class="bold">Vulnerable </span><span id="formVulnerable" contentEditable="true">${this.currentUnit.damageVulnerabilities}</span></div>`,m=`<div><span class="bold">Status Immune </span><span id="formConditions" contentEditable="true">${this.currentUnit.conditionImmunities}</span></div>`,c='<div id="formAbilityCollection">';if(this.currentUnit.specialAbilities&&this.currentUnit.specialAbilities?.length>0)for(let o of this.currentUnit.specialAbilities)c+='<div id="formAbilityContainer" class="Ability">',c+=`<span id="formAbilityName" class="abilityname" contentEditable="true">${o.name}</span>.  `,c+=`<span id="formAbilityDesc" class="description" contentEditable="true">${this.SetClassOnRollable(o.desc)}</span>`,c+="</div>";c+="</div>";let u='<div id="formAttackCollection">';if(this.currentUnit.standardActions&&this.currentUnit.standardActions?.length>0)for(let o of this.currentUnit.standardActions)u+='<div id="formAttackContainer" class="attack">',u+=`<span id="formAttackName" class="attackname" contentEditable="true">${o.name}</span>.  `,u+=`<span id="formAttackDesc" class="description" contentEditable="true">${this.SetClassOnRollable(o.desc)}</span>`,u+="</div>";u+="</div>";let b='<div id="formReactionCollection">';if(this.currentUnit.reactions&&this.currentUnit.reactions?.length>0)for(let o of this.currentUnit.reactions)b+='<div id="formReactionContainer" class="Reaction">',b+=`<span id="formReactionName" class="reactionname" contentEditable="true">${o.name}</span>.  `,b+=`<span id="formReactionDesc" class="description" contentEditable="true">${this.SetClassOnRollable(o.desc)}</span>`,b+="</div>";b+="</div>";let U='<div id="formLegendaryCollection">';if(this.currentUnit.legendaryActions&&this.currentUnit.legendaryActions?.length>0)for(let o of this.currentUnit.legendaryActions)U+='<div id="formLegendaryContainer" class="Legendary">',U+=`<span id="formLegendaryName" class="legendaryname" contentEditable="true">${o.name}</span>.  `,U+=`<span id="formLegendaryDesc" class="description" contentEditable="true">${this.SetClassOnRollable(o.desc)}</span>`,U+="</div>";U+="</div>";let $='<div id="formSpellCollection">';if(this.currentUnit.spellActions&&this.currentUnit.spellActions?.length>0)for(let o of this.currentUnit.spellActions)$+='<div id="formSpellContainer" class="attack">',$+=`<span id="formSpellName" class="attackname" contentEditable="true">${o.name}</span>.  `,$+=`<span id="formSpellDesc" class="description" contentEditable="true">${this.SetClassOnRollable(o.desc)}</span>`,$+="</div>";$+="</div>",t.querySelector("#submenu").innerHTML=`
            <div class="headline"><span id="formUnitName" class="name" contentEditable="true">${this.currentUnit.unitName}</span><span id="buttonContainer" class="floatright"></span></div>
            ${e}
            <div class="gradient"></div>
            ${i}
            ${r}
            <div class="gradient"></div>
            ${a}
            <div class="hr"></div>
            ${l}
            <div class="gradient"></div>
            ${d}
            ${g}
            ${s}
            <div class="gradient"></div>
            ${h}
            ${v}
            ${p}
            ${m}
            <div class="actions red">Abilities<span id="addAbilityButtonContainer" class="floatright"></span></div>
            <div class="hr"></div>
            ${c}
            <div class="actions red">Actions<span id="addAttackButtonContainer" class="floatright"></span></div>
            <div class="hr"></div>
            ${u}
            <div class="actions red">Reactions<span id="addReactionButtonContainer" class="floatright"></span></div>
            <div class="hr"></div>
            ${b}
            <div class="actions red">Legendary Actions<span id="addLegendaryButtonContainer" class="floatright"></span></div>
            <div class="hr"></div>
            ${U}
            <div class="actions red">Spell List<span id="addSpellButtonContainer" class="floatright"></span></div>
            <div class="hr"></div>
            ${$}
            </div>
           `,t.querySelectorAll("[contenteditable=true]").forEach(o=>{o.addEventListener("keypress",function(f){f.key==="Enter"&&f.preventDefault()})}),this.AppendFavoriteButton(),this.AppendCollectionSaveButton(),this.AppendUnitExportButton(),this.AppendUnitSaveButton(),this.AppendAddActionButtons(),this.AppendImportUnitButton(),this.AppendSearchButtons(),this.AppendJSONButton(),t.querySelectorAll(".clickableRollerDmg").forEach(o=>{o.addEventListener("click",async f=>{let S=o?.parentElement?.previousElementSibling?.textContent;if(S=S||"<Nameless>",f&&f.currentTarget){f.preventDefault();const C=f.currentTarget;C.parentElement?.blur();const I=`${this.currentUnit.unitName} used ${S} and rolled ${C.textContent} for ... ${k.RollString(C.textContent)}!`;return this.SendtoChatLog(I),await y.notification.show(I)}return null})}),t.querySelectorAll(".clickableRollerAtk").forEach(o=>{o.addEventListener("click",async f=>{let S=o?.parentElement?.previousElementSibling?.textContent;if(S=S||"<Nameless>",f&&f.currentTarget){f.preventDefault();const C=f.currentTarget;C.parentElement?.blur();let I=C.textContent?.replace(/[()]/g,"");const N=Number(I?.substring(1)),x=N==0?"(1d20)":`(1d20 + ${N})`,R=k.RollString(x),L=`${this.currentUnit.unitName} used ${S} and rolled ${C.textContent} for ... ${R} to hit!`,H=R-N==20;return this.SendtoChatLog(L,H),await y.notification.show(L)}return null})}),t.querySelectorAll(".rollableScore").forEach(o=>{o.addEventListener("click",async f=>{const S=o.dataset.name;if(f&&f.currentTarget&&o.firstChild){const C=Math.floor((Number(o.firstChild?.textContent)-10)/2);let I=C==0?"(1d20)":`(1d20 + ${C})`;f.preventDefault();const N=`${this.currentUnit.unitName} rolled ${S} ${I} for ... ${k.RollString(I)}!`;return this.SendtoChatLog(N),await y.notification.show(N)}return null})}),t.querySelectorAll(".rollableSave").forEach(o=>{o.addEventListener("click",async f=>{const S=o.dataset.name;if(f&&f.currentTarget&&o.firstChild){const C=Number(o.firstChild?.textContent);let I=C==0?"(1d20)":`(1d20 + ${C})`;f.preventDefault();const N=`${this.currentUnit.unitName} rolled ${S} ${I} for ... ${k.RollString(I)}!`;return this.SendtoChatLog(N),await y.notification.show(N)}return null})})}))}async renderSearchForm(t){const n="♥";var e=this;const i=t.querySelector("#searchValue");i.addEventListener("keypress",async function(s){s.key==="Enter"&&await l()});const r=t.querySelector("#searchConfirm");r.onclick=async function(){await l()},t.querySelector("#searchmenu").innerHTML=`
            <div id="searchResultsContainer"><ul id="monsterList"><div class="superCenter">No favorites to show.</div></ul></div>
           `;let a=await B.Creatures.filter(s=>s.favorite==!0).toArray();if(a=a.sort((s,p)=>s.unitName.localeCompare(p.unitName)),a.length>0){const s=t.querySelector("#monsterList");let p="";a.forEach(m=>{const c=m.favorite?n:"",u=t.createElement("input");u.type="button",u.id=`${m.id}`,u.className="collectionImportButtonConfirm",u.value="Import",u.title=`Import ${m.unitName} onto this Unit`;const b=t.createElement("input");b.type="button",b.id=`del-${m.id}`,b.className="removeCollectionButtonConfirm",b.value="⨉",b.title=`Remove ${m.unitName} from Collection`,p+=`<li id="listItem-${m.id}" style="--tooltip-color:${g(m.dataSlug)}" data-tag="🡆 from [Collection] User:${m.dataSlug}"><div class="monsterNameList">${c} ${d(m.unitName)}</div><div class="monsterImportButtonContainer">${b.outerHTML} ${u.outerHTML}</div></li>`}),s.innerHTML=p,t.querySelectorAll(".collectionImportButtonConfirm").forEach(m=>{m.addEventListener("click",async c=>await e.ImportCollectionMonsterInfo(c.currentTarget.id))}),t.querySelectorAll(".removeCollectionButtonConfirm").forEach(m=>{m.addEventListener("click",async c=>await e.DeleteCollectionMonsterInfo(c.currentTarget.id))})}async function l(){const s=t.querySelector("#monsterList");s.innerHTML='<div class="superCenter">Searching...</div>';let p="";await fetch(`${e.open5eApiString}${i.value}`).then(function(h){return h.json()}).then(function(h){h.count>0&&h.results.forEach(m=>{const c=t.createElement("input");c.type="button",c.id=`${m.slug}`,c.className="monsterImportButtonConfirm",c.value="Import",c.title=`Import ${m.name} onto this Unit`,p+=`<li style="--tooltip-color:${g(m.document__slug)}" data-tag="🡆 from ${m.document__slug}"><div class="monsterNameList">${d(m.name)}</div><div class="monsterImportButtonContainer">${c.outerHTML}</div></li>`})});const v=await B.Creatures.filter(h=>h.unitName.toLowerCase().includes(i.value.toLocaleLowerCase())).toArray();v.length>0&&v.forEach(h=>{const m=h.favorite?n:"",c=t.createElement("input");c.type="button",c.id=`${h.id}`,c.className="collectionImportButtonConfirm",c.value="Import",c.title=`Import ${h.unitName} onto this Unit`;const u=t.createElement("input");u.type="button",u.id=`del-${h.id}`,u.className="removeCollectionButtonConfirm",u.value="⨉",u.title=`Remove ${h.unitName} from Collection`,p+=`<li id="listItem-${h.id}" style="--tooltip-color:${g(h.dataSlug)}" data-tag="🡆 from [Collection] User:${h.dataSlug}"><div class="monsterNameList">${m} ${d(h.unitName)}</div><div class="monsterImportButtonContainer">${u.outerHTML} ${c.outerHTML}</div></li>`}),p!="Searching..."?(s.innerHTML=p,t.querySelectorAll(".monsterImportButtonConfirm").forEach(u=>{u.addEventListener("click",async b=>await e.ImportNewMonsterInfo(b.currentTarget.id))}),t.querySelectorAll(".collectionImportButtonConfirm").forEach(u=>{u.addEventListener("click",async b=>await e.ImportCollectionMonsterInfo(b.currentTarget.id))}),t.querySelectorAll(".removeCollectionButtonConfirm").forEach(u=>{u.addEventListener("click",async b=>await e.DeleteCollectionMonsterInfo(b.currentTarget.id))})):s.innerHTML="<div class='Nothing'>No results found.</div>"}function d(s){return s.length>30?s.substring(0,30)+"...":s}function g(s){if(!s||s==="")return"white";switch(s.substring(0,1).toLowerCase()){case"a":case"e":case"i":case"o":case"u":return"red";case"b":case"c":case"d":return"pink";case"f":case"g":case"h":return"cyan";case"j":case"k":case"l":case"m":return"#747bff";case"n":case"p":case"q":return"green";case"r":case"s":case"t":case"v":return"orange";case"w":case"x":case"y":case"z":return"yellow";default:return"white"}}}async renderCustomImportForm(t){var n=this;t.querySelector("#importjsonmenu").innerHTML=`
            <h2>Import Custom JSON</h2>
            <div id="importDataContainer"></div>
            <div class="hr"></div>
            <div class = "red" id="exampleLine>Example Input</div>
            <div id="instructionsContainer"></div>
            <h3>Formatting Help</h3>
            ${this.exampleInterfaceString()}
            <div class="hr"></div>
            <h3>Sub Types</h3>
            ${this.exampleTypesString()}
           `;const e=t.getElementById("importDataContainer"),i=t.createElement("input");i.type="button",i.id="returnButton",i.className="chalkBorder",i.style.marginRight="4px",i.title="Go back to Unit Information",i.value="Return",i.onclick=async function(){n.ShowImportJSONMenu(!1),n.ShowSubMenu(!0)};const r=t.createElement("textarea");r.id="customJsonValueBox",r.className="",r.title="Type custom monster information here";const a=t.createElement("input");a.type="button",a.id="importConfirm",a.value="Confirm Import",a.className="chalkBorder",a.style.marginLeft="4px",a.title="Click to import custom data",a.onclick=async function(){const l=r.value;try{E.freshImport=!0,E.currentUnit.ImportFromJSON(l),E.renderUnitInfo(t)}catch(d){alert(`The import failed - ${d}`)}},this.importReturnContainer?.append(i),e?.append(r),this.importBarContainer?.append(a)}exampleInterfaceString(){return`Below are the type definitions for importing.</br>
        If you need an easier example, click Export on an existing Unit and change the values.</br>
        When adding clickable dice rolls, the format is '(#d#+#)' ex; (2d6+2)</br>
        If it's detected in an Action description, it should create a roller button.</br></br>
        <b>CustomEntity</b> </br>
        {</br>
            unitName: string;</br> 
            initiative: number;</br> 
            currentHP: number;</br> 
            maxHP: number;</br> 
            armorClass: number;</br> 
        
            unitType: string;</br> 
            unitSize: string;</br> 
        
            strScore: number;</br> 
            strSave: number;</br> 
        
            dexScore: number;</br> 
            dexSave: number;</br> 
        
            conScore: number;</br> 
            conSave: number;</br> 
        
            intScore: number;</br> 
            intSave: number;</br> 
        
            wisScore: number;</br> 
            wisSave: number;</br> 
        
            chaScore: number;</br> 
            chaSave: number;</br> 
        
            damageVulnerabilities: string;</br> 
            damageImmunities: string;</br> 
            damageResistances: string;</br> 
            conditionImmunities: string;</br> 
        
            challengeRating: string;</br> 
            experiencePoints: number;</br> 
            alignment: string;</br> 
        
            standardActions: ActionsEntity[];</br> 
            legendaryActions?: ActionsEntity[];</br> 
            specialAbilities?: ActionsEntity[];</br> 
            spellActions?: ActionsEntity[];</br> 
            reactions?: ActionsEntity[];</br> 
        
            senses: string;</br> 
            languages: string;</br> 
        
            speedWalk: number;</br> 
            speedFly: number;</br> 
            speedClimb: number;</br> 
            speedBurrow: number;</br> 
            speedSwim: number;</br> 

            dataSlug: string;</br>
        }`}exampleTypesString(){return`      
        <b>ActionsEntity</b> </br>
        {   name?: string;</br>
          desc?: string;</br>   }</br>
        `}AppendImportUnitButton(){var t=this;const n=document.createElement("input");n.type="button",n.id="gotoMonsterSearchButton",n.value="Search Monster Data",n.className="chalkBorder",n.style.marginRight="4px",n.title="Search Monster Data from Free Open5e",n.onclick=async function(){t.ShowSubMenu(!1),t.ShowSearchMenu(!0),t.renderSearchForm(document)},this.mainFooterContainer.appendChild(n)}AppendSearchButtons(){var t=this;const n=document.createElement("input");n.type="button",n.id="returnButton",n.className="chalkBorder",n.style.marginRight="4px",n.title="Go back to Unit Information",n.value="Return",n.onclick=async function(){t.ShowSearchMenu(!1),t.ShowSubMenu(!0)};const e=document.createElement("input");e.type="search",e.id="searchValue",e.className="textInput",e.title="Type a value to filter monsters by";const i=document.createElement("input");i.type="button",i.id="searchConfirm",i.value="Search",i.className="chalkBorder",i.style.marginLeft="4px",i.title="Click to send Search",this.searchBarContainer?.append(n),this.searchBarContainer?.append(e),this.searchBarContainer?.append(i)}AppendJSONButton(){var t=this;const n=document.createElement("input");n.type="button",n.id="gotoImportMonsterButton",n.value="Import Custom JSON",n.className="chalkBorder",n.style.marginLeft="4px",n.title="Import Custom Monster JSON Data",n.onclick=async function(){t.ShowSubMenu(!1),t.ShowImportJSONMenu(!0),t.renderCustomImportForm(document)},this.mainFooterContainer.appendChild(n)}AppendUnitSaveButton(){var t=this;const n=document.getElementById("buttonContainer"),e=document.createElement("input");e.type="image",e.id="saveButton",e.className="clickable",e.onclick=async function(){if(t.currentUnit.ImportCustomFormInputs(document),t.multiSheet){const a=t.currentUnit.unitName;let l=[];for(var i=0,r;r=t.multiIds[i];i++){t.currentUnit.id=r,t.currentUnit.tokenId=r,t.currentUnit.isActive=t.multiActive[i]==="true"?1:0,t.currentUnit.unitName=a+` ${String.fromCharCode("A".charCodeAt(0)+i)}`;const d=JSON.stringify(t.currentUnit),g=JSON.parse(d);l.push(g)}await y.scene.items.updateItems(d=>d.id===l.find(g=>g.id===d.id)?.id,d=>{for(let g of d)g.text.plainText=l.find(s=>s.id===g.id).unitName}),await B.ActiveEncounter.bulkPut(l)}else await B.ActiveEncounter.put(t.currentUnit,t.POPOVERSUBMENUID),await y.scene.items.updateItems(a=>a.id==t.currentUnit.id,a=>{for(let l of a)l.text.plainText=t.currentUnit.unitName})},e.src="/save.svg",e.title="Save Changes",e.height=20,e.width=20,n?.appendChild(e)}AppendFavoriteButton(){var t=this;const n=document.getElementById("buttonContainer"),e=document.createElement("input");e.type="image",e.id="favoriteButton",e.value="false",e.className="clickable",e.onclick=async function(){const i=document.getElementById("collectionButton");e.value=="false"?(e.value="true",e.src="/favorite.svg",e.className="clickable favorite",i.className="clickable favorite",i.title="Save to Collection & Favorite",t.favorite=!0):(e.value="false",e.src="/favoriteline.svg",e.className="clickable",i.className="clickable",i.title="Save to Collection",t.favorite=!1)},e.src="/favoriteline.svg",e.title="Toggle Favorite on Export",e.height=20,e.width=20,n?.appendChild(e)}AppendCollectionSaveButton(){var t=this;const n=document.getElementById("buttonContainer"),e=document.createElement("input");e.type="image",e.id="collectionButton",e.className="clickable",e.onclick=async function(){t.currentUnit.ImportCustomFormInputs(document);const i=await y.player.getName();let r=JSON.parse(JSON.stringify(t.currentUnit));r.id="",r.tokenId="",r.dataSlug=i;const a=await B.Creatures.get({unitName:t.currentUnit.unitName,dataSlug:i});if(a)confirm(`Unit named '${t.currentUnit.unitName}' already found in Collection. Overwrite?`)&&(r.id=a.id,r.favorite=t.favorite,await B.Creatures.put(r,a.id));else{const l=O();r.id=l,r.favorite=t.favorite,await B.Creatures.put(r,l)}},e.src="/collection.svg",e.title="Save to Collection",e.height=20,e.width=20,n?.appendChild(e)}AppendUnitExportButton(){var t=this;const n=document.getElementById("buttonContainer"),e=document.createElement("input");e.type="image",e.id="exportButton",e.className="clickable",e.onclick=async function(){t.currentUnit.ImportCustomFormInputs(document),t.currentUnit.id="",t.currentUnit.tokenId="";try{await navigator.clipboard.writeText(JSON.stringify(t.currentUnit)),window.alert("JSON Copied to clipboard.")}catch{window.alert("Unable to copy; Please try again.")}},e.src="/export.svg",e.title="Export to JSON",e.height=20,e.width=20,n?.appendChild(e)}AppendAddActionButtons(){const t=document.getElementById("addLegendaryButtonContainer"),n=document.createElement("input");n.type="image",n.id="addButton",n.title="Add new Legendary Action",n.className="clickable",n.onclick=async function(){const p=document.getElementById("formLegendaryCollection"),v=`<div id="formLegendaryContainer" class="Legendary"><span id="formLegendaryName" class="legendaryname" contentEditable="true">Legend-Name.</span>.
                <span id="formLegendaryDesc" class="description" contentEditable="true">Legend-Desc</span></div>`;p.insertAdjacentHTML("beforeend",v)},n.src="/add.svg",n.height=20,n.width=20,t?.appendChild(n);const e=document.getElementById("addReactionButtonContainer"),i=document.createElement("input");i.type="image",i.id="addButton",i.title="Add new Reaction",i.className="clickable",i.onclick=async function(){const p=document.getElementById("formReactionCollection"),v=`<div id="formReactionContainer" class="Reaction"><span id="formReactionName" class="reactionname" contentEditable="true">React-Name.</span>.
                <span id="formReactionDesc" class="description" contentEditable="true">React-Desc</span></div>`;p.insertAdjacentHTML("beforeend",v)},i.src="/add.svg",i.height=20,i.width=20,e?.appendChild(i);const r=document.getElementById("addAttackButtonContainer"),a=document.createElement("input");a.type="image",a.id="addButton",a.title="Add new Attack",a.className="clickable",a.onclick=async function(){const p=document.getElementById("formAttackCollection"),v=`<div id="formAttackContainer" class="attack"><span id="formAttackName" class="attackname" contentEditable="true">Atk-Name.</span>.
                <span id="formAttackDesc" class="description" contentEditable="true">Atk-Desc</span></div>`;p.insertAdjacentHTML("beforeend",v)},a.src="/add.svg",a.height=20,a.width=20,r?.appendChild(a);const l=document.getElementById("addAbilityButtonContainer"),d=document.createElement("input");d.type="image",d.id="addButton",d.className="clickable",d.title="Add new Ability",d.onclick=async function(){const p=document.getElementById("formAbilityCollection"),v=`<div id="formAbilityContainer" class="ability"><span id="formAbilityName" class="abilityname" contentEditable="true">Act-Name.</span>.
                <span id="formAbilityDesc" class="description" contentEditable="true">Act-Desc</span></div>`;p.insertAdjacentHTML("beforeend",v)},d.src="/add.svg",d.height=20,d.width=20,l?.appendChild(d);const g=document.getElementById("addSpellButtonContainer"),s=document.createElement("input");s.type="image",s.id="addButton",s.title="Add new Spell",s.className="clickable",s.onclick=async function(){const p=document.getElementById("formSpellCollection"),v=`<div id="formSpellContainer" class="spell"><span id="formSpellName" class="spellname" contentEditable="true">Spell-Name.</span>.
                <span id="formSpellDesc" class="description" contentEditable="true">Spell-Desc</span></div>`;p.insertAdjacentHTML("beforeend",v)},s.src="/add.svg",s.height=20,s.width=20,g?.appendChild(s)}ShowSubMenu(t){const n=document.querySelector("#submenu");n.hidden=!t,this.importReturnContainer.hidden=!0,this.importBarContainer.hidden=!0,this.searchBarContainer.hidden=!0,this.mainFooterContainer.hidden=!1}ShowSearchMenu(t){const n=document.querySelector("#searchmenu");n.hidden=!t,this.importReturnContainer.hidden=!0,this.importBarContainer.hidden=!0,this.searchBarContainer.hidden=!1,this.mainFooterContainer.hidden=!0}ShowImportJSONMenu(t){const n=document.querySelector("#importjsonmenu");n.hidden=!t,this.importReturnContainer.hidden=!1,this.importBarContainer.hidden=!1,this.searchBarContainer.hidden=!0,this.mainFooterContainer.hidden=!0}async ImportNewMonsterInfo(t){await fetch(`https://api.open5e.com/monsters/${t}/?format=json`).then(function(n){return n.json()}).then(async function(n){let e=new M(E.POPOVERSUBMENUID);const i=document.querySelector("#monsterList");i.innerHTML='<div class="superCenter">Loading...</div>',await e.ImportOpen5eResponse(n),e.isActive=E.currentUnit.isActive,e.currentHP=e.maxHP,E.freshImport=!0,E.currentUnit=e,E.renderUnitInfo(document)})}async ImportCollectionMonsterInfo(t){const n=await B.Creatures.get(t);n&&(E.freshImport=!0,E.currentUnit.SetToModel(n),E.renderUnitInfo(document))}async DeleteCollectionMonsterInfo(t){const n=t.substring(4);await B.Creatures.delete(n),document.getElementById(`listItem-${n}`)?.remove()}SetClassOnRollable(t){let n="";return n=t.replaceAll(A.PARENTHESESMATCH,"<span class='clickableRollerDmg' contenteditable='false'>($1)</span>"),n=n.replaceAll(A.PLUSMATCH,"<span class='clickableRollerAtk' contenteditable='false'> $1 </span>"),n}async SendtoChatLog(t,n=!1){const i=(await B.Settings.get(A.SETTINGSID))?.gmRumbleLog?this.userId:"0000",r=new Date().toISOString(),a={};return a[`${A.EXTENSIONID}/metadata_chatlog`]={chatlog:t,sender:"Clash!",targetId:i,created:r,color:"#ff9294",critical:n},await y.player.setMetadata(a)}}const E=new P;E.renderUnitInfo(document);
