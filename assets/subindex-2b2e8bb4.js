import{C as N,U as M,O as y,S as T,d as B,G as O}from"./utilities-83dee349.js";class k{static RollString(e){const n=this.Parse(e);var t=this.Roll(n.number,n.type,Math.random);return t.result+=n.modifier,t.result}static Dice(e,n,t){return this.RollMe(e,n,t).result}static Roll(e,n,t){t||(t=Math.random);for(var a=[],i=0,r=0;r<e;r++){var l=0;l=Math.floor(t()*n)+1,i+=l,a.push(l)}return{rolls:a,result:i}}static RollMe(e,n,t){var a="Invalid dice values.",i={};if(typeof e=="string")i=this.Parse(e);else if(typeof e=="number")i={number:this.ValidNumber(e.toString(),a),type:this.ValidNumber(n.toString(),a),modifier:0};else throw new Error(a);typeof n=="function"&&(t=n);var r=this.Roll(i.number,i.type,t);return r.result+=i.modifier,Object.assign(i,r),i}static DetailedRoll(e,n,t){return this.RollMe(e,n,t)}static CompressNotation(e){return e.trim().replace(/\s+/g,"")}static ValidNumber(e,n){let t=Number(e);if(Number.isNaN(t)||!Number.isInteger(t)||t<1)throw new Error(n);return t}static Parse(e){var n=this.CompressNotation(e).match(N.DICENOTATION),t=0,a="Invalid notation: "+e;if(n.length<3)throw new Error(a);if(n[3]&&N.DICEMODIFIER.test(n[3])){var i=n[3].match(N.DICEMODIFIER),r=this.ValidNumber(i[2],a);i[1].trim()==="-"&&(r*=-1),t=r}const l=this.ValidNumber(n[1],a),u=this.ValidNumber(n[2],a);return{number:l,type:u,modifier:t}}}class F{dbImport;currentUnit;freshImport;favorite;userId;open5eApiString="https://api.open5e.com/monsters/?format=json&search=";POPOVERSUBMENUID="";multiSheet=!1;multiActive=[];multiIds=[];importReturnContainer;importBarContainer;searchBarContainer;mainFooterContainer;constructor(){this.freshImport=!1,this.favorite=!1,this.importReturnContainer=document.getElementById("importReturnContainer"),this.importBarContainer=document.getElementById("importFooterButtonContainer"),this.searchBarContainer=document.getElementById("searchFooterButtonContainer"),this.mainFooterContainer=document.getElementById("mainFooterContainer");const e=window.location.search,n=new URLSearchParams(e),t=n.get("unitid"),a=n.get("multi"),i=n.get("unitactive");a&&i?(this.multiSheet=!0,this.multiIds=t.split(","),this.multiActive=i?.split(","),this.POPOVERSUBMENUID=N.MULTISHEETID,document.documentElement.style.borderColor="deeppink",document.querySelectorAll("#submenu, #searchmenu, #importjsonmenu").forEach(l=>{l.style.height="90%"})):(document.getElementById("groupEdit").hidden=!0,this.POPOVERSUBMENUID=t),this.currentUnit=new M(this.POPOVERSUBMENUID,"Default")}async renderUnitInfo(e){this.POPOVERSUBMENUID!=null&&(this.ShowSearchMenu(!1),this.ShowImportJSONMenu(!1),this.ShowSubMenu(!0),y.onReady(async()=>{const n=await y.theme.getTheme();T(n,e),y.theme.onChange(o=>{T(o,e)}),this.userId=await y.player.getId(),!this.freshImport&&!this.multiSheet&&await this.currentUnit.ImportFromDatabase(this.POPOVERSUBMENUID),this.freshImport=!1;let t="";t='<div class="description">',t+=`<span id="formUnitSize" contentEditable="true">${this.currentUnit.unitSize}</span> `,t+=`<span id="formAlignment" contentEditable="true">${this.currentUnit.alignment}</span> `,t+=`<span id="formUnitType" contentEditable="true">${this.currentUnit.unitType}</span>`,t+="</div>";let a=`<div><span class="bold red">Hit Points </span><span id="formMaxHP" contentEditable="true">${this.currentUnit.maxHP}</span>
                            <span class="floatright"><span class="bold red">Armor Class </span><span id="formArmorClass" contentEditable="true">${this.currentUnit.armorClass}</span></span></div>`,i=`<div><span class="bold red">Speed</span>  <span class="floatright"><img class ="Icon" src="/speedwalk.svg"> <span id="formSpeedWalk" contentEditable="true">${this.currentUnit.speedWalk}</span> 
                <img class ="Icon" src="/speedswim.svg"> <span id="formSpeedSwim" contentEditable="true">${this.currentUnit.speedSwim}</span> 
                <img class ="Icon" src="/speedburrow.svg"> <span id="formSpeedBurrow" contentEditable="true">${this.currentUnit.speedBurrow}</span> 
                <img class ="Icon" src="/speedclimb.svg"> <span id="formSpeedClimb" contentEditable="true">${this.currentUnit.speedClimb}</span> 
                <img class ="Icon" src="/speedfly.svg"> <span id="formSpeedFly" contentEditable="true">${this.currentUnit.speedFly}</span></span></div>`,r="<table>";r+='<tr class="red"><th>STR    </th><th>DEX   </th><th>CON    </th><th>INT   </th><th>WIS   </th><th>CHA   </th></tr>',r+=`<tr><td><div class="rollableScore" data-name="Strength"><span id="formStrScore" contentEditable="true">${this.currentUnit.strScore}</span></div></td>
                            <td><div class="rollableScore" data-name="Dexterity"><span id="formDexScore" contentEditable="true">${this.currentUnit.dexScore}</span></div></td>
                            <td><div class="rollableScore" data-name="Constitution"><span id="formConScore" contentEditable="true">${this.currentUnit.conScore}</span></div></td>
                            <td><div class="rollableScore" data-name="Intelligence"><span id="formIntScore" contentEditable="true">${this.currentUnit.intScore}</span></div></td>
                            <td><div class="rollableScore" data-name="Wisdom"><span id="formWisScore" contentEditable="true">${this.currentUnit.wisScore}</span></div></td>
                            <td><div class="rollableScore" data-name="Charisma"><span id="formChaScore" contentEditable="true">${this.currentUnit.chaScore}</span></div></td></tr>`,r+="</table>";let l='<div class="center red bold">Saving Throws</div><table>';l+=`<tr><td><div class="rollableSave" data-name="Strength Save"><span id="formStrSave" contentEditable="true">${this.currentUnit.strSave}</span></div></td>
                            <td><div class="rollableSave" data-name="Dexterity Save"><span id="formDexSave" contentEditable="true">${this.currentUnit.dexSave}</span></div></td>
                            <td><div class="rollableSave" data-name="Constitution Save"><span id="formConSave" contentEditable="true">${this.currentUnit.conSave}</span></div></td>
                            <td><div class="rollableSave" data-name="Intelligence Save"><span id="formIntSave" contentEditable="true">${this.currentUnit.intSave}</span></div></td>
                            <td><div class="rollableSave" data-name="Wisdom Save"><span id="formWisSave" contentEditable="true">${this.currentUnit.wisSave}</span></div></td>
                            <td><div class="rollableSave" data-name="Charisma Save"><span id="formChaSave" contentEditable="true">${this.currentUnit.chaSave}</span></div></td></tr>`,l+="</table>";let u=`<div><span class="bold">Senses </span><span id="formSenses" contentEditable="true">${this.currentUnit.senses}</span></div>`,g=`<div><span class="bold">Languages </span><span id="formLanguages" contentEditable="true">${this.currentUnit.languages}</span></div>`,s=`<div><span class="bold">Challenge </span>
                <span id="formChallengeRating" contentEditable="true">${this.currentUnit.challengeRating}</span>
                (<span id="formEXP" contentEditable="true">${this.currentUnit.experiencePoints}</span> EXP)</div>`,p=`<div><span class="bold">Immunity </span><span id="formImmune" contentEditable="true">${this.currentUnit.damageImmunities}</span></div>`,v=`<div><span class="bold">Resistance </span><span id="formResist" contentEditable="true">${this.currentUnit.damageResistances}</span></div>`,h=`<div><span class="bold">Vulnerable </span><span id="formVulnerable" contentEditable="true">${this.currentUnit.damageVulnerabilities}</span></div>`,m=`<div><span class="bold">Status Immune </span><span id="formConditions" contentEditable="true">${this.currentUnit.conditionImmunities}</span></div>`,c='<div id="formAbilityCollection">';if(this.currentUnit.specialAbilities&&this.currentUnit.specialAbilities?.length>0)for(let o of this.currentUnit.specialAbilities)c+='<div id="formAbilityContainer" class="Ability">',c+=`<span id="formAbilityName" class="abilityname" contentEditable="true">${o.name}</span>.  `,c+=`<span id="formAbilityDesc" class="description" contentEditable="true">${this.SetClassOnRollable(o.desc)}</span>`,c+="</div>";c+="</div>";let d='<div id="formAttackCollection">';if(this.currentUnit.standardActions&&this.currentUnit.standardActions?.length>0)for(let o of this.currentUnit.standardActions)d+='<div id="formAttackContainer" class="attack">',d+=`<span id="formAttackName" class="attackname" contentEditable="true">${o.name}</span>.  `,d+=`<span id="formAttackDesc" class="description" contentEditable="true">${this.SetClassOnRollable(o.desc)}</span>`,d+="</div>";d+="</div>";let b='<div id="formReactionCollection">';if(this.currentUnit.reactions&&this.currentUnit.reactions?.length>0)for(let o of this.currentUnit.reactions)b+='<div id="formReactionContainer" class="Reaction">',b+=`<span id="formReactionName" class="reactionname" contentEditable="true">${o.name}</span>.  `,b+=`<span id="formReactionDesc" class="description" contentEditable="true">${this.SetClassOnRollable(o.desc)}</span>`,b+="</div>";b+="</div>";let U='<div id="formLegendaryCollection">';if(this.currentUnit.legendaryActions&&this.currentUnit.legendaryActions?.length>0)for(let o of this.currentUnit.legendaryActions)U+='<div id="formLegendaryContainer" class="Legendary">',U+=`<span id="formLegendaryName" class="legendaryname" contentEditable="true">${o.name}</span>.  `,U+=`<span id="formLegendaryDesc" class="description" contentEditable="true">${this.SetClassOnRollable(o.desc)}</span>`,U+="</div>";U+="</div>";let $='<div id="formSpellCollection">';if(this.currentUnit.spellActions&&this.currentUnit.spellActions?.length>0)for(let o of this.currentUnit.spellActions)$+='<div id="formSpellContainer" class="attack">',$+=`<span id="formSpellName" class="attackname" contentEditable="true">${o.name}</span>.  `,$+=`<span id="formSpellDesc" class="description" contentEditable="true">${this.SetClassOnRollable(o.desc)}</span>`,$+="</div>";$+="</div>",e.querySelector("#submenu").innerHTML=`
            <div class="headline"><span id="formUnitName" class="name" contentEditable="true">${this.currentUnit.unitName}</span><span id="buttonContainer" class="floatright"></span></div>
            ${t}
            <div class="gradient"></div>
            ${a}
            ${i}
            <div class="gradient"></div>
            ${r}
            <div class="hr"></div>
            ${l}
            <div class="gradient"></div>
            ${u}
            ${g}
            ${s}
            <div class="gradient"></div>
            ${h}
            ${v}
            ${p}
            ${m}
            <div class="actions red">Abilities<span id="addAbilityButtonContainer" class="floatright"></span></div>
            <div class="hr"></div>
            ${c}
            <div class="actions red">Actions<span id="addAttackButtonContainer" class="floatright"></span></div>
            <div class="hr"></div>
            ${d}
            <div class="actions red">Reactions<span id="addReactionButtonContainer" class="floatright"></span></div>
            <div class="hr"></div>
            ${b}
            <div class="actions red">Legendary Actions<span id="addLegendaryButtonContainer" class="floatright"></span></div>
            <div class="hr"></div>
            ${U}
            <div class="actions red">Spell List<span id="addSpellButtonContainer" class="floatright"></span></div>
            <div class="hr"></div>
            ${$}
            </div>
           `,e.querySelectorAll("[contenteditable=true]").forEach(o=>{o.addEventListener("keypress",function(f){f.key==="Enter"&&f.preventDefault()})}),this.AppendFavoriteButton(),this.AppendCollectionSaveButton(),this.AppendUnitExportButton(),this.AppendUnitSaveButton(),this.AppendAddActionButtons(),this.AppendImportUnitButton(),this.AppendSearchButtons(),this.AppendJSONButton(),e.querySelectorAll(".clickableRollerDmg").forEach(o=>{o.addEventListener("click",async f=>{let S=o?.parentElement?.previousElementSibling?.textContent;if(S=S||"<Nameless>",f&&f.currentTarget){f.preventDefault();const C=f.currentTarget;C.parentElement?.blur();const I=`${this.currentUnit.unitName} used ${S} and rolled ${C.textContent} for ... ${k.RollString(C.textContent)}!`;return this.SendtoChatLog(I),await y.notification.show(I)}return null})}),e.querySelectorAll(".clickableRollerAtk").forEach(o=>{o.addEventListener("click",async f=>{let S=o?.parentElement?.previousElementSibling?.textContent;if(S=S||"<Nameless>",f&&f.currentTarget){f.preventDefault();const C=f.currentTarget;C.parentElement?.blur();let I=C.textContent?.replace(/[()]/g,"");const A=Number(I?.substring(1)),x=A==0?"(1d20)":`(1d20 + ${A})`,R=k.RollString(x),L=`${this.currentUnit.unitName} used ${S} and rolled ${C.textContent} for ... ${R} to hit!`,H=R-A==20;return this.SendtoChatLog(L,H),await y.notification.show(L)}return null})}),e.querySelectorAll(".rollableScore").forEach(o=>{o.addEventListener("click",async f=>{const S=o.dataset.name;if(f&&f.currentTarget&&o.firstChild){const C=Math.floor((Number(o.firstChild?.textContent)-10)/2);let I=C==0?"(1d20)":`(1d20 + ${C})`;f.preventDefault();const A=`${this.currentUnit.unitName} rolled ${S} ${I} for ... ${k.RollString(I)}!`;return this.SendtoChatLog(A),await y.notification.show(A)}return null})}),e.querySelectorAll(".rollableSave").forEach(o=>{o.addEventListener("click",async f=>{const S=o.dataset.name;if(f&&f.currentTarget&&o.firstChild){const C=Number(o.firstChild?.textContent);let I=C==0?"(1d20)":`(1d20 + ${C})`;f.preventDefault();const A=`${this.currentUnit.unitName} rolled ${S} ${I} for ... ${k.RollString(I)}!`;return this.SendtoChatLog(A),await y.notification.show(A)}return null})})}))}async renderSearchForm(e){const n="♥";var t=this;const a=e.querySelector("#searchValue");a.addEventListener("keypress",async function(s){s.key==="Enter"&&await l()});const i=e.querySelector("#searchConfirm");i.onclick=async function(){await l()},e.querySelector("#searchmenu").innerHTML=`
            <div id="searchResultsContainer"><ul id="monsterList"><div class="superCenter">No favorites to show.</div></ul></div>
           `;let r=await B.Creatures.filter(s=>s.favorite==!0).toArray();if(r=r.sort((s,p)=>s.unitName.localeCompare(p.unitName)),r.length>0){const s=e.querySelector("#monsterList");let p="";r.forEach(m=>{const c=m.favorite?n:"",d=e.createElement("input");d.type="button",d.id=`${m.id}`,d.className="collectionImportButtonConfirm",d.value="Import",d.title=`Import ${m.unitName} onto this Unit`;const b=e.createElement("input");b.type="button",b.id=`del-${m.id}`,b.className="removeCollectionButtonConfirm",b.value="⨉",b.title=`Remove ${m.unitName} from Collection`,p+=`<li id="listItem-${m.id}" style="--tooltip-color:${g(m.dataSlug)}" data-tag="🡆 from [Collection] User:${m.dataSlug}"><div class="monsterNameList">${c} ${u(m.unitName)}</div><div class="monsterImportButtonContainer">${b.outerHTML} ${d.outerHTML}</div></li>`}),s.innerHTML=p,e.querySelectorAll(".collectionImportButtonConfirm").forEach(m=>{m.addEventListener("click",async c=>await t.ImportCollectionMonsterInfo(c.currentTarget.id))}),e.querySelectorAll(".removeCollectionButtonConfirm").forEach(m=>{m.addEventListener("click",async c=>await t.DeleteCollectionMonsterInfo(c.currentTarget.id))})}async function l(){const s=e.querySelector("#monsterList");s.innerHTML='<div class="superCenter">Searching...</div>';let p="";await fetch(`${t.open5eApiString}${a.value}`).then(function(h){return h.json()}).then(function(h){h.count>0&&h.results.forEach(m=>{const c=e.createElement("input");c.type="button",c.id=`${m.slug}`,c.className="monsterImportButtonConfirm",c.value="Import",c.title=`Import ${m.name} onto this Unit`,p+=`<li style="--tooltip-color:${g(m.document__slug)}" data-tag="🡆 from ${m.document__slug}"><div class="monsterNameList">${u(m.name)}</div><div class="monsterImportButtonContainer">${c.outerHTML}</div></li>`})});const v=await B.Creatures.filter(h=>h.unitName.toLowerCase().includes(a.value.toLocaleLowerCase())).toArray();v.length>0&&v.forEach(h=>{const m=h.favorite?n:"",c=e.createElement("input");c.type="button",c.id=`${h.id}`,c.className="collectionImportButtonConfirm",c.value="Import",c.title=`Import ${h.unitName} onto this Unit`;const d=e.createElement("input");d.type="button",d.id=`del-${h.id}`,d.className="removeCollectionButtonConfirm",d.value="⨉",d.title=`Remove ${h.unitName} from Collection`,p+=`<li id="listItem-${h.id}" style="--tooltip-color:${g(h.dataSlug)}" data-tag="🡆 from [Collection] User:${h.dataSlug}"><div class="monsterNameList">${m} ${u(h.unitName)}</div><div class="monsterImportButtonContainer">${d.outerHTML} ${c.outerHTML}</div></li>`}),p!="Searching..."?(s.innerHTML=p,e.querySelectorAll(".monsterImportButtonConfirm").forEach(d=>{d.addEventListener("click",async b=>await t.ImportNewMonsterInfo(b.currentTarget.id))}),e.querySelectorAll(".collectionImportButtonConfirm").forEach(d=>{d.addEventListener("click",async b=>await t.ImportCollectionMonsterInfo(b.currentTarget.id))}),e.querySelectorAll(".removeCollectionButtonConfirm").forEach(d=>{d.addEventListener("click",async b=>await t.DeleteCollectionMonsterInfo(b.currentTarget.id))})):s.innerHTML="<div class='Nothing'>No results found.</div>"}function u(s){return s.length>30?s.substring(0,30)+"...":s}function g(s){if(!s||s==="")return"white";switch(s.substring(0,1).toLowerCase()){case"a":case"e":case"i":case"o":case"u":return"red";case"b":case"c":case"d":return"pink";case"f":case"g":case"h":return"cyan";case"j":case"k":case"l":case"m":return"#747bff";case"n":case"p":case"q":return"green";case"r":case"s":case"t":case"v":return"orange";case"w":case"x":case"y":case"z":return"yellow";default:return"white"}}}async renderCustomImportForm(e){e.querySelector("#importjsonmenu").innerHTML=`
            <h2>Import Custom JSON</h2>
            <div id="importDataContainer"></div>
            <div class="hr"></div>
            <div class = "red" id="exampleLine>Example Input</div>
            <div id="instructionsContainer"></div>
            <h3>Formatting Help</h3>
            ${this.exampleInterfaceString()}
            <div class="hr"></div>
            <h3>Sub Types</h3>
            ${this.exampleTypesString()}
           `;const n=e.getElementById("importDataContainer"),t=e.createElement("textarea");t.id="customJsonValueBox",t.className="",t.title="Type custom monster information here",n?.append(t),this.AppendImportCustomButtons()}exampleInterfaceString(){return`Below are the type definitions for importing.</br>
        If you need an easier example, click Export on an existing Unit and change the values.</br>
        When adding clickable dice rolls, the format is '(#d#+#)' ex; (2d6+2)</br>
        If it's detected in an Action description, it should create a roller button.</br></br>
        <b>CustomEntity</b> </br>
        {</br>
            unitName: string;</br> 
            initiative: number;</br> 
            currentHP: number;</br> 
            maxHP: number;</br> 
            armorClass: number;</br> 
        
            unitType: string;</br> 
            unitSize: string;</br> 
        
            strScore: number;</br> 
            strSave: number;</br> 
        
            dexScore: number;</br> 
            dexSave: number;</br> 
        
            conScore: number;</br> 
            conSave: number;</br> 
        
            intScore: number;</br> 
            intSave: number;</br> 
        
            wisScore: number;</br> 
            wisSave: number;</br> 
        
            chaScore: number;</br> 
            chaSave: number;</br> 
        
            damageVulnerabilities: string;</br> 
            damageImmunities: string;</br> 
            damageResistances: string;</br> 
            conditionImmunities: string;</br> 
        
            challengeRating: string;</br> 
            experiencePoints: number;</br> 
            alignment: string;</br> 
        
            standardActions: ActionsEntity[];</br> 
            legendaryActions?: ActionsEntity[];</br> 
            specialAbilities?: ActionsEntity[];</br> 
            spellActions?: ActionsEntity[];</br> 
            reactions?: ActionsEntity[];</br> 
        
            senses: string;</br> 
            languages: string;</br> 
        
            speedWalk: number;</br> 
            speedFly: number;</br> 
            speedClimb: number;</br> 
            speedBurrow: number;</br> 
            speedSwim: number;</br> 

            dataSlug: string;</br>
        }`}exampleTypesString(){return`      
        <b>ActionsEntity</b> </br>
        {   name?: string;</br>
          desc?: string;</br>   }</br>
        `}AppendImportUnitButton(){var e=this;if(document.getElementById("gotoMonsterSearchButton"))return;const t=document.createElement("input");t.type="button",t.id="gotoMonsterSearchButton",t.value="Search Monster Data",t.className="chalkBorder",t.style.marginRight="4px",t.title="Search Monster Data from Free Open5e",t.onclick=async function(){e.ShowSubMenu(!1),e.ShowSearchMenu(!0),e.renderSearchForm(document)},this.mainFooterContainer.appendChild(t)}AppendSearchButtons(){var e=this;if(document.getElementById("returnButton"))return;const t=document.createElement("input");t.type="button",t.id="returnButton",t.className="chalkBorder",t.style.marginRight="4px",t.title="Go back to Unit Information",t.value="Return",t.onclick=async function(){e.ShowSearchMenu(!1),e.ShowSubMenu(!0)};const a=document.createElement("input");a.type="search",a.id="searchValue",a.className="textInput",a.title="Type a value to filter monsters by";const i=document.createElement("input");i.type="button",i.id="searchConfirm",i.value="Search",i.className="chalkBorder",i.style.marginLeft="4px",i.title="Click to send Search",this.searchBarContainer?.append(t),this.searchBarContainer?.append(a),this.searchBarContainer?.append(i)}AppendImportCustomButtons(){var e=this;if(document.getElementById("importConfirm"))return;const t=document.createElement("input");t.type="button",t.id="returnButton",t.className="chalkBorder",t.style.marginRight="4px",t.title="Go back to Unit Information",t.value="Return",t.onclick=async function(){e.ShowImportJSONMenu(!1),e.ShowSubMenu(!0)};const a=document.getElementById("customJsonValueBox"),i=document.createElement("input");i.type="button",i.id="importConfirm",i.value="Confirm Import",i.className="chalkBorder",i.style.marginLeft="4px",i.title="Click to import custom data",i.onclick=async function(){const r=a.value;try{E.freshImport=!0,E.currentUnit.ImportFromJSON(r),E.renderUnitInfo(document)}catch(l){alert(`The import failed - ${l}`)}},this.importReturnContainer?.append(t),this.importBarContainer?.append(i)}AppendJSONButton(){var e=this;if(document.getElementById("gotoImportMonsterButton"))return;const t=document.createElement("input");t.type="button",t.id="gotoImportMonsterButton",t.value="Import Custom JSON",t.className="chalkBorder",t.style.marginLeft="4px",t.title="Import Custom Monster JSON Data",t.onclick=async function(){e.ShowSubMenu(!1),e.ShowImportJSONMenu(!0),e.renderCustomImportForm(document)},this.mainFooterContainer.appendChild(t)}AppendUnitSaveButton(){var e=this;const n=document.getElementById("buttonContainer"),t=document.createElement("input");t.type="image",t.id="saveButton",t.className="clickable",t.onclick=async function(){if(e.currentUnit.ImportCustomFormInputs(document),e.multiSheet){const r=e.currentUnit.unitName;let l=[];for(var a=0,i;i=e.multiIds[a];a++){e.currentUnit.id=i,e.currentUnit.tokenId=i,e.currentUnit.isActive=e.multiActive[a]==="true"?1:0,e.currentUnit.unitName=r+` ${String.fromCharCode("A".charCodeAt(0)+a)}`;const u=JSON.stringify(e.currentUnit),g=JSON.parse(u);l.push(g)}await y.scene.items.updateItems(u=>u.id===l.find(g=>g.id===u.id)?.id,u=>{for(let g of u)g.text.plainText=l.find(s=>s.id===g.id).unitName}),await B.ActiveEncounter.bulkPut(l)}else await B.ActiveEncounter.put(e.currentUnit,e.POPOVERSUBMENUID),await y.scene.items.updateItems(r=>r.id==e.currentUnit.id,r=>{for(let l of r)l.text.plainText=e.currentUnit.unitName})},t.src="/save.svg",t.title="Save Changes",t.height=20,t.width=20,n?.appendChild(t)}AppendFavoriteButton(){var e=this;const n=document.getElementById("buttonContainer"),t=document.createElement("input");t.type="image",t.id="favoriteButton",t.value="false",t.className="clickable",t.onclick=async function(){const a=document.getElementById("collectionButton");t.value=="false"?(t.value="true",t.src="/favorite.svg",t.className="clickable favorite",a.className="clickable favorite",a.title="Save to Collection & Favorite",e.favorite=!0):(t.value="false",t.src="/favoriteline.svg",t.className="clickable",a.className="clickable",a.title="Save to Collection",e.favorite=!1)},t.src="/favoriteline.svg",t.title="Toggle Favorite on Export",t.height=20,t.width=20,n?.appendChild(t)}AppendCollectionSaveButton(){var e=this;const n=document.getElementById("buttonContainer"),t=document.createElement("input");t.type="image",t.id="collectionButton",t.className="clickable",t.onclick=async function(){e.currentUnit.ImportCustomFormInputs(document);const a=await y.player.getName();let i=JSON.parse(JSON.stringify(e.currentUnit));i.id="",i.tokenId="",i.dataSlug=a;const r=await B.Creatures.get({unitName:e.currentUnit.unitName,dataSlug:a});if(r)confirm(`Unit named '${e.currentUnit.unitName}' already found in Collection. Overwrite?`)&&(i.id=r.id,i.favorite=e.favorite,await B.Creatures.put(i,r.id));else{const l=O();i.id=l,i.favorite=e.favorite,await B.Creatures.put(i,l)}},t.src="/collection.svg",t.title="Save to Collection",t.height=20,t.width=20,n?.appendChild(t)}AppendUnitExportButton(){var e=this;const n=document.getElementById("buttonContainer"),t=document.createElement("input");t.type="image",t.id="exportButton",t.className="clickable",t.onclick=async function(){e.currentUnit.ImportCustomFormInputs(document),e.currentUnit.id="",e.currentUnit.tokenId="";try{await navigator.clipboard.writeText(JSON.stringify(e.currentUnit)),window.alert("JSON Copied to clipboard.")}catch{window.alert("Unable to copy; Please try again.")}},t.src="/export.svg",t.title="Export to JSON",t.height=20,t.width=20,n?.appendChild(t)}AppendAddActionButtons(){const e=document.getElementById("addLegendaryButtonContainer"),n=document.createElement("input");n.type="image",n.id="addButton",n.title="Add new Legendary Action",n.className="clickable",n.onclick=async function(){const p=document.getElementById("formLegendaryCollection"),v=`<div id="formLegendaryContainer" class="Legendary"><span id="formLegendaryName" class="legendaryname" contentEditable="true">Legend-Name.</span>.
                <span id="formLegendaryDesc" class="description" contentEditable="true">Legend-Desc</span></div>`;p.insertAdjacentHTML("beforeend",v)},n.src="/add.svg",n.height=20,n.width=20,e?.appendChild(n);const t=document.getElementById("addReactionButtonContainer"),a=document.createElement("input");a.type="image",a.id="addButton",a.title="Add new Reaction",a.className="clickable",a.onclick=async function(){const p=document.getElementById("formReactionCollection"),v=`<div id="formReactionContainer" class="Reaction"><span id="formReactionName" class="reactionname" contentEditable="true">React-Name.</span>.
                <span id="formReactionDesc" class="description" contentEditable="true">React-Desc</span></div>`;p.insertAdjacentHTML("beforeend",v)},a.src="/add.svg",a.height=20,a.width=20,t?.appendChild(a);const i=document.getElementById("addAttackButtonContainer"),r=document.createElement("input");r.type="image",r.id="addButton",r.title="Add new Attack",r.className="clickable",r.onclick=async function(){const p=document.getElementById("formAttackCollection"),v=`<div id="formAttackContainer" class="attack"><span id="formAttackName" class="attackname" contentEditable="true">Atk-Name.</span>.
                <span id="formAttackDesc" class="description" contentEditable="true">Atk-Desc</span></div>`;p.insertAdjacentHTML("beforeend",v)},r.src="/add.svg",r.height=20,r.width=20,i?.appendChild(r);const l=document.getElementById("addAbilityButtonContainer"),u=document.createElement("input");u.type="image",u.id="addButton",u.className="clickable",u.title="Add new Ability",u.onclick=async function(){const p=document.getElementById("formAbilityCollection"),v=`<div id="formAbilityContainer" class="ability"><span id="formAbilityName" class="abilityname" contentEditable="true">Act-Name.</span>.
                <span id="formAbilityDesc" class="description" contentEditable="true">Act-Desc</span></div>`;p.insertAdjacentHTML("beforeend",v)},u.src="/add.svg",u.height=20,u.width=20,l?.appendChild(u);const g=document.getElementById("addSpellButtonContainer"),s=document.createElement("input");s.type="image",s.id="addButton",s.title="Add new Spell",s.className="clickable",s.onclick=async function(){const p=document.getElementById("formSpellCollection"),v=`<div id="formSpellContainer" class="spell"><span id="formSpellName" class="spellname" contentEditable="true">Spell-Name.</span>.
                <span id="formSpellDesc" class="description" contentEditable="true">Spell-Desc</span></div>`;p.insertAdjacentHTML("beforeend",v)},s.src="/add.svg",s.height=20,s.width=20,g?.appendChild(s)}ShowSubMenu(e){const n=document.querySelector("#submenu");n.hidden=!e,this.importReturnContainer.hidden=!0,this.importBarContainer.hidden=!0,this.searchBarContainer.hidden=!0,this.mainFooterContainer.hidden=!1}ShowSearchMenu(e){const n=document.querySelector("#searchmenu");n.hidden=!e,this.importReturnContainer.hidden=!0,this.importBarContainer.hidden=!0,this.searchBarContainer.hidden=!1,this.mainFooterContainer.hidden=!0}ShowImportJSONMenu(e){const n=document.querySelector("#importjsonmenu");n.hidden=!e,this.importReturnContainer.hidden=!1,this.importBarContainer.hidden=!1,this.searchBarContainer.hidden=!0,this.mainFooterContainer.hidden=!0}async ImportNewMonsterInfo(e){await fetch(`https://api.open5e.com/monsters/${e}/?format=json`).then(function(n){return n.json()}).then(async function(n){let t=new M(E.POPOVERSUBMENUID);const a=document.querySelector("#monsterList");a.innerHTML='<div class="superCenter">Loading...</div>',await t.ImportOpen5eResponse(n),t.isActive=E.currentUnit.isActive,t.currentHP=t.maxHP,E.freshImport=!0,E.currentUnit=t,E.renderUnitInfo(document)})}async ImportCollectionMonsterInfo(e){const n=await B.Creatures.get(e);n&&(E.freshImport=!0,E.currentUnit.SetToModel(n),E.renderUnitInfo(document))}async DeleteCollectionMonsterInfo(e){const n=e.substring(4);await B.Creatures.delete(n),document.getElementById(`listItem-${n}`)?.remove()}SetClassOnRollable(e){let n="";return n=e.replaceAll(N.PARENTHESESMATCH,"<span class='clickableRollerDmg' contenteditable='false'>($1)</span>"),n=n.replaceAll(N.PLUSMATCH,"<span class='clickableRollerAtk' contenteditable='false'> $1 </span>"),n}async SendtoChatLog(e,n=!1){const a=(await B.Settings.get(N.SETTINGSID))?.gmRumbleLog?this.userId:"0000",i=new Date().toISOString(),r={};return r[`${N.EXTENSIONID}/metadata_chatlog`]={chatlog:e,sender:"Clash!",targetId:a,created:i,color:"#ff9294",critical:n},await y.player.setMetadata(r)}}const E=new F;E.renderUnitInfo(document);
