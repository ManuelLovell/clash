import{C as U,U as L,O as C,S as M,d as N,G as x}from"./utilities-e765e3ac.js";class k{static RollString(e){const n=this.Parse(e);var t=this.Roll(n.number,n.type,Math.random);return t.result+=n.modifier,t.result}static Dice(e,n,t){return this.RollMe(e,n,t).result}static Roll(e,n,t){t||(t=Math.random);for(var a=[],r=0,i=0;i<e;i++){var s=0;s=Math.floor(t()*n)+1,r+=s,a.push(s)}return{rolls:a,result:r}}static RollMe(e,n,t){var a="Invalid dice values.",r={};if(typeof e=="string")r=this.Parse(e);else if(typeof e=="number")r={number:this.ValidNumber(e.toString(),a),type:this.ValidNumber(n.toString(),a),modifier:0};else throw new Error(a);typeof n=="function"&&(t=n);var i=this.Roll(r.number,r.type,t);return i.result+=r.modifier,Object.assign(r,i),r}static DetailedRoll(e,n,t){return this.RollMe(e,n,t)}static CompressNotation(e){return e.trim().replace(/\s+/g,"")}static ValidNumber(e,n){let t=Number(e);if(Number.isNaN(t)||!Number.isInteger(t)||t<1)throw new Error(n);return t}static Parse(e){var n=this.CompressNotation(e).match(U.DICENOTATION),t=0,a="Invalid notation: "+e;if(n.length<3)throw new Error(a);if(n[3]&&U.DICEMODIFIER.test(n[3])){var r=n[3].match(U.DICEMODIFIER),i=this.ValidNumber(r[2],a);r[1].trim()==="-"&&(i*=-1),t=i}const s=this.ValidNumber(n[1],a),o=this.ValidNumber(n[2],a);return{number:s,type:o,modifier:t}}}class H{dbImport;currentUnit;freshImport;favorite;userId;open5eApiString="https://api.open5e.com/monsters/?format=json&search=";POPOVERSUBMENUID="";multiSheet=!1;multiActive=[];multiIds=[];constructor(){this.freshImport=!1,this.favorite=!1;const e=window.location.search,n=new URLSearchParams(e),t=n.get("unitid"),a=n.get("multi"),r=n.get("unitactive");a&&r?(this.multiSheet=!0,this.multiIds=t.split(","),this.multiActive=r?.split(","),this.POPOVERSUBMENUID=U.MULTISHEETID,document.documentElement.style.borderColor="deeppink"):(document.getElementById("groupEdit").hidden=!0,this.POPOVERSUBMENUID=t),this.currentUnit=new L(this.POPOVERSUBMENUID,"Default")}async renderUnitInfo(e){this.POPOVERSUBMENUID!=null&&(this.ShowSearchMenu(!1),this.ShowImportJSONMenu(!1),this.ShowSubMenu(!0),C.onReady(async()=>{const n=await C.theme.getTheme();M(n,e),C.theme.onChange(l=>{M(l,e)}),this.userId=await C.player.getId(),!this.freshImport&&!this.multiSheet&&await this.currentUnit.ImportFromDatabase(this.POPOVERSUBMENUID),this.freshImport=!1;let t="";t='<div class="description">',t+=`<span id="formUnitSize" contentEditable="true">${this.currentUnit.unitSize}</span> `,t+=`<span id="formAlignment" contentEditable="true">${this.currentUnit.alignment}</span> `,t+=`<span id="formUnitType" contentEditable="true">${this.currentUnit.unitType}</span>`,t+="</div>";let a=`<div><span class="bold red">Hit Points </span><span id="formMaxHP" contentEditable="true">${this.currentUnit.maxHP}</span>
                            <span class="floatright"><span class="bold red">Armor Class </span><span id="formArmorClass" contentEditable="true">${this.currentUnit.armorClass}</span></span></div>`,r=`<div><span class="bold red">Speed</span>  <span class="floatright"><img class ="Icon" src="/speedwalk.svg"> <span id="formSpeedWalk" contentEditable="true">${this.currentUnit.speedWalk}</span> 
                <img class ="Icon" src="/speedswim.svg"> <span id="formSpeedSwim" contentEditable="true">${this.currentUnit.speedSwim}</span> 
                <img class ="Icon" src="/speedburrow.svg"> <span id="formSpeedBurrow" contentEditable="true">${this.currentUnit.speedBurrow}</span> 
                <img class ="Icon" src="/speedclimb.svg"> <span id="formSpeedClimb" contentEditable="true">${this.currentUnit.speedClimb}</span> 
                <img class ="Icon" src="/speedfly.svg"> <span id="formSpeedFly" contentEditable="true">${this.currentUnit.speedFly}</span></span></div>`,i="<table>";i+='<tr class="red"><th>STR    </th><th>DEX   </th><th>CON    </th><th>INT   </th><th>WIS   </th><th>CHA   </th></tr>',i+=`<tr><td><div class="rollableScore" data-name="Strength"><span id="formStrScore" contentEditable="true">${this.currentUnit.strScore}</span></div></td>
                            <td><div class="rollableScore" data-name="Dexterity"><span id="formDexScore" contentEditable="true">${this.currentUnit.dexScore}</span></div></td>
                            <td><div class="rollableScore" data-name="Constitution"><span id="formConScore" contentEditable="true">${this.currentUnit.conScore}</span></div></td>
                            <td><div class="rollableScore" data-name="Intelligence"><span id="formIntScore" contentEditable="true">${this.currentUnit.intScore}</span></div></td>
                            <td><div class="rollableScore" data-name="Wisdom"><span id="formWisScore" contentEditable="true">${this.currentUnit.wisScore}</span></div></td>
                            <td><div class="rollableScore" data-name="Charisma"><span id="formChaScore" contentEditable="true">${this.currentUnit.chaScore}</span></div></td></tr>`,i+="</table>";let s='<div class="center red bold">Saving Throws</div><table>';s+=`<tr><td><div class="rollableSave" data-name="Strength Save"><span id="formStrSave" contentEditable="true">${this.currentUnit.strSave}</span></div></td>
                            <td><div class="rollableSave" data-name="Dexterity Save"><span id="formDexSave" contentEditable="true">${this.currentUnit.dexSave}</span></div></td>
                            <td><div class="rollableSave" data-name="Constitution Save"><span id="formConSave" contentEditable="true">${this.currentUnit.conSave}</span></div></td>
                            <td><div class="rollableSave" data-name="Intelligence Save"><span id="formIntSave" contentEditable="true">${this.currentUnit.intSave}</span></div></td>
                            <td><div class="rollableSave" data-name="Wisdom Save"><span id="formWisSave" contentEditable="true">${this.currentUnit.wisSave}</span></div></td>
                            <td><div class="rollableSave" data-name="Charisma Save"><span id="formChaSave" contentEditable="true">${this.currentUnit.chaSave}</span></div></td></tr>`,s+="</table>";let o=`<div><span class="bold">Senses </span><span id="formSenses" contentEditable="true">${this.currentUnit.senses}</span></div>`,v=`<div><span class="bold">Languages </span><span id="formLanguages" contentEditable="true">${this.currentUnit.languages}</span></div>`,f=`<div><span class="bold">Challenge </span>
                <span id="formChallengeRating" contentEditable="true">${this.currentUnit.challengeRating}</span>
                (<span id="formEXP" contentEditable="true">${this.currentUnit.experiencePoints}</span> EXP)</div>`,g=`<div><span class="bold">Immunity </span><span id="formImmune" contentEditable="true">${this.currentUnit.damageImmunities}</span></div>`,c=`<div><span class="bold">Resistance </span><span id="formResist" contentEditable="true">${this.currentUnit.damageResistances}</span></div>`,E=`<div><span class="bold">Vulnerable </span><span id="formVulnerable" contentEditable="true">${this.currentUnit.damageVulnerabilities}</span></div>`,$=`<div><span class="bold">Status Immune </span><span id="formConditions" contentEditable="true">${this.currentUnit.conditionImmunities}</span></div>`,p='<div id="formAbilityCollection">';if(this.currentUnit.specialAbilities&&this.currentUnit.specialAbilities?.length>0)for(let l of this.currentUnit.specialAbilities)p+='<div id="formAbilityContainer" class="Ability">',p+=`<span id="formAbilityName" class="abilityname" contentEditable="true">${l.name}</span>.  `,p+=`<span id="formAbilityDesc" class="description" contentEditable="true">${this.SetClassOnRollable(l.desc)}</span>`,p+="</div>";p+="</div>";let d='<div id="formAttackCollection">';if(this.currentUnit.standardActions&&this.currentUnit.standardActions?.length>0)for(let l of this.currentUnit.standardActions)d+='<div id="formAttackContainer" class="attack">',d+=`<span id="formAttackName" class="attackname" contentEditable="true">${l.name}</span>.  `,d+=`<span id="formAttackDesc" class="description" contentEditable="true">${this.SetClassOnRollable(l.desc)}</span>`,d+="</div>";d+="</div>";let u='<div id="formReactionCollection">';if(this.currentUnit.reactions&&this.currentUnit.reactions?.length>0)for(let l of this.currentUnit.reactions)u+='<div id="formReactionContainer" class="Reaction">',u+=`<span id="formReactionName" class="reactionname" contentEditable="true">${l.name}</span>.  `,u+=`<span id="formReactionDesc" class="description" contentEditable="true">${this.SetClassOnRollable(l.desc)}</span>`,u+="</div>";u+="</div>";let m='<div id="formLegendaryCollection">';if(this.currentUnit.legendaryActions&&this.currentUnit.legendaryActions?.length>0)for(let l of this.currentUnit.legendaryActions)m+='<div id="formLegendaryContainer" class="Legendary">',m+=`<span id="formLegendaryName" class="legendaryname" contentEditable="true">${l.name}</span>.  `,m+=`<span id="formLegendaryDesc" class="description" contentEditable="true">${this.SetClassOnRollable(l.desc)}</span>`,m+="</div>";m+="</div>";let b='<div id="formSpellCollection">';if(this.currentUnit.spellActions&&this.currentUnit.spellActions?.length>0)for(let l of this.currentUnit.spellActions)b+='<div id="formSpellContainer" class="attack">',b+=`<span id="formSpellName" class="attackname" contentEditable="true">${l.name}</span>.  `,b+=`<span id="formSpellDesc" class="description" contentEditable="true">${this.SetClassOnRollable(l.desc)}</span>`,b+="</div>";b+="</div>",e.querySelector("#submenu").innerHTML=`
            <div class="headline"><span id="formUnitName" class="name" contentEditable="true">${this.currentUnit.unitName}</span><span id="buttonContainer" class="floatright"></span></div>
            ${t}
            <div class="gradient"></div>
            ${a}
            ${r}
            <div class="gradient"></div>
            ${i}
            <div class="hr"></div>
            ${s}
            <div class="gradient"></div>
            ${o}
            ${v}
            ${f}
            <div class="gradient"></div>
            ${E}
            ${c}
            ${g}
            ${$}
            <div class="actions red">Abilities<span id="addAbilityButtonContainer" class="floatright"></span></div>
            <div class="hr"></div>
            ${p}
            <div class="actions red">Actions<span id="addAttackButtonContainer" class="floatright"></span></div>
            <div class="hr"></div>
            ${d}
            <div class="actions red">Reactions<span id="addReactionButtonContainer" class="floatright"></span></div>
            <div class="hr"></div>
            ${u}
            <div class="actions red">Legendary Actions<span id="addLegendaryButtonContainer" class="floatright"></span></div>
            <div class="hr"></div>
            ${m}
            <div class="actions red">Spell List<span id="addSpellButtonContainer" class="floatright"></span></div>
            <div class="hr"></div>
            ${b}
            </div>
            <footer id="footerButtonContainer">
            </footer>
           `,e.querySelectorAll("[contenteditable=true]").forEach(l=>{l.addEventListener("keypress",function(h){h.key==="Enter"&&h.preventDefault()})}),this.AppendFavoriteButton(),this.AppendCollectionSaveButton(),this.AppendUnitExportButton(),this.AppendUnitSaveButton(),this.AppendAddActionButtons(),this.AppendImportUnitButton(),this.AppendJSONButton(),e.querySelectorAll(".clickableRollerDmg").forEach(l=>{l.addEventListener("click",async h=>{let S=l?.parentElement?.previousElementSibling?.textContent;if(S=S||"<Nameless>",h&&h.currentTarget){h.preventDefault();const y=h.currentTarget;y.parentElement?.blur();const B=`${this.currentUnit.unitName} used ${S} and rolled ${y.textContent} for ... ${k.RollString(y.textContent)}!`;return this.SendtoChatLog(B),await C.notification.show(B)}return null})}),e.querySelectorAll(".clickableRollerAtk").forEach(l=>{l.addEventListener("click",async h=>{let S=l?.parentElement?.previousElementSibling?.textContent;if(S=S||"<Nameless>",h&&h.currentTarget){h.preventDefault();const y=h.currentTarget;y.parentElement?.blur();let B=y.textContent?.replace(/[()]/g,"");const A=Number(B?.substring(1)),D=A==0?"(1d20)":`(1d20 + ${A})`;console.log(A);const R=`${this.currentUnit.unitName} used ${S} and rolled ${y.textContent} for ... ${k.RollString(D)} to hit!`;return this.SendtoChatLog(R),await C.notification.show(R)}return null})}),e.querySelectorAll(".rollableScore").forEach(l=>{l.addEventListener("click",async h=>{const S=l.dataset.name;if(h&&h.currentTarget&&l.firstChild){const y=Math.floor((Number(l.firstChild?.textContent)-10)/2);let B=y==0?"(1d20)":`(1d20 + ${y})`;h.preventDefault();const A=`${this.currentUnit.unitName} rolled ${S} ${B} for ... ${k.RollString(B)}!`;return this.SendtoChatLog(A),await C.notification.show(A)}return null})}),e.querySelectorAll(".rollableSave").forEach(l=>{l.addEventListener("click",async h=>{const S=l.dataset.name;if(h&&h.currentTarget&&l.firstChild){const y=Number(l.firstChild?.textContent);let B=y==0?"(1d20)":`(1d20 + ${y})`;h.preventDefault();const A=`${this.currentUnit.unitName} rolled ${S} ${B} for ... ${k.RollString(B)}!`;return this.SendtoChatLog(A),await C.notification.show(A)}return null})})}))}async renderSearchForm(e){const n="♥";var t=this;e.querySelector("#searchmenu").innerHTML=`
            <div id="searchResultsContainer"><ul id="monsterList"><div class="superCenter">No favorites to show.</div></ul></div>
            <footer></span><span class="returnFloatRight" id="searchFooterButtonContainer"></span></footer>
           `;let a=await N.Creatures.filter(c=>c.favorite==!0).toArray();if(a=a.sort((c,E)=>c.unitName.localeCompare(E.unitName)),a.length>0){const c=e.querySelector("#monsterList");let E="";a.forEach(d=>{const u=d.favorite?n:"",m=e.createElement("input");m.type="button",m.id=`${d.id}`,m.className="collectionImportButtonConfirm",m.value="Import",m.title=`Import ${d.unitName} onto this Unit`;const b=e.createElement("input");b.type="button",b.id=`del-${d.id}`,b.className="removeCollectionButtonConfirm",b.value="⨉",b.title=`Remove ${d.unitName} from Collection`,E+=`<li id="listItem-${d.id}" style="--tooltip-color:${g(d.dataSlug)}" data-tag="🡆 from [Collection] User:${d.dataSlug}"><div class="monsterNameList">${u} ${f(d.unitName)}</div><div class="monsterImportButtonContainer">${b.outerHTML} ${m.outerHTML}</div></li>`}),c.innerHTML=E,e.querySelectorAll(".collectionImportButtonConfirm").forEach(d=>{d.addEventListener("click",async u=>await t.ImportCollectionMonsterInfo(u.currentTarget.id))}),e.querySelectorAll(".removeCollectionButtonConfirm").forEach(d=>{d.addEventListener("click",async u=>await t.DeleteCollectionMonsterInfo(u.currentTarget.id))})}const r=e.getElementById("searchFooterButtonContainer"),i=e.createElement("input");i.type="button",i.id="returnButton",i.className="chalkBorder",i.style.marginRight="4px",i.title="Go back to Unit Information",i.value="Return",i.onclick=async function(){t.ShowSearchMenu(!1),t.ShowSubMenu(!0)};const s=e.createElement("input");s.type="search",s.id="searchValue",s.className="textInput",s.title="Type a value to filter monsters by",s.addEventListener("keypress",async function(c){c.key==="Enter"&&await v()});const o=e.createElement("input");o.type="button",o.id="searchConfirm",o.value="Search",o.className="chalkBorder",o.style.marginLeft="4px",o.title="Click to send Search",o.onclick=async function(){await v()};async function v(){const c=e.querySelector("#monsterList");c.innerHTML='<div class="superCenter">Searching...</div>';let E="";await fetch(`${t.open5eApiString}${s.value}`).then(function(p){return p.json()}).then(function(p){p.count>0&&p.results.forEach(d=>{const u=e.createElement("input");u.type="button",u.id=`${d.slug}`,u.className="monsterImportButtonConfirm",u.value="Import",u.title=`Import ${d.name} onto this Unit`,E+=`<li style="--tooltip-color:${g(d.document__slug)}" data-tag="🡆 from ${d.document__slug}"><div class="monsterNameList">${f(d.name)}</div><div class="monsterImportButtonContainer">${u.outerHTML}</div></li>`})});const $=await N.Creatures.filter(p=>p.unitName.toLowerCase().includes(s.value.toLocaleLowerCase())).toArray();$.length>0&&$.forEach(p=>{const d=p.favorite?n:"",u=e.createElement("input");u.type="button",u.id=`${p.id}`,u.className="collectionImportButtonConfirm",u.value="Import",u.title=`Import ${p.unitName} onto this Unit`;const m=e.createElement("input");m.type="button",m.id=`del-${p.id}`,m.className="removeCollectionButtonConfirm",m.value="⨉",m.title=`Remove ${p.unitName} from Collection`,E+=`<li id="listItem-${p.id}" style="--tooltip-color:${g(p.dataSlug)}" data-tag="🡆 from [Collection] User:${p.dataSlug}"><div class="monsterNameList">${d} ${f(p.unitName)}</div><div class="monsterImportButtonContainer">${m.outerHTML} ${u.outerHTML}</div></li>`}),E!="Searching..."?(c.innerHTML=E,e.querySelectorAll(".monsterImportButtonConfirm").forEach(m=>{m.addEventListener("click",async b=>await t.ImportNewMonsterInfo(b.currentTarget.id))}),e.querySelectorAll(".collectionImportButtonConfirm").forEach(m=>{m.addEventListener("click",async b=>await t.ImportCollectionMonsterInfo(b.currentTarget.id))}),e.querySelectorAll(".removeCollectionButtonConfirm").forEach(m=>{m.addEventListener("click",async b=>await t.DeleteCollectionMonsterInfo(b.currentTarget.id))})):c.innerHTML="<div class='Nothing'>No results found.</div>"}r?.append(i),r?.append(s),r?.append(o);function f(c){return c.length>30?c.substring(0,30)+"...":c}function g(c){if(!c||c==="")return"white";switch(c.substring(0,1).toLowerCase()){case"a":case"e":case"i":case"o":case"u":return"red";case"b":case"c":case"d":return"pink";case"f":case"g":case"h":return"cyan";case"j":case"k":case"l":case"m":return"#747bff";case"n":case"p":case"q":return"green";case"r":case"s":case"t":case"v":return"orange";case"w":case"x":case"y":case"z":return"yellow";default:return"white"}}}async renderCustomImportForm(e){var n=this;e.querySelector("#importjsonmenu").innerHTML=`
            <h2>Import Custom JSON</h2>
            <div id="importDataContainer"></div>
            <div class="hr"></div>
            <div class = "red" id="exampleLine>Example Input</div>
            <div id="instructionsContainer"></div>
            <h3>Formatting Help</h3>
            ${this.exampleInterfaceString()}
            <div class="hr"></div>
            <h3>Sub Types</h3>
            ${this.exampleTypesString()}
            <footer><span id="importReturnContainer"></span><span id="importFooterButtonContainer"></span></footer>
           `;const t=e.getElementById("importDataContainer"),a=e.getElementById("importReturnContainer"),r=e.getElementById("importFooterButtonContainer"),i=e.createElement("input");i.type="button",i.id="returnButton",i.className="chalkBorder",i.style.marginRight="4px",i.title="Go back to Unit Information",i.value="Return",i.onclick=async function(){n.ShowImportJSONMenu(!1),n.ShowSubMenu(!0)};const s=e.createElement("textarea");s.id="customJsonValueBox",s.className="",s.title="Type custom monster information here";const o=e.createElement("input");o.type="button",o.id="importConfirm",o.value="Confirm Import",o.className="chalkBorder",o.style.marginLeft="4px",o.title="Click to import custom data",o.onclick=async function(){const v=s.value;try{I.freshImport=!0,I.currentUnit.ImportFromJSON(v),I.renderUnitInfo(e)}catch(f){alert(`The import failed - ${f}`)}},a?.append(i),t?.append(s),r?.append(o)}exampleInterfaceString(){return`Below are the type definitions for importing.</br>
        If you need an easier example, click Export on an existing Unit and change the values.</br>
        When adding clickable dice rolls, the format is '(#d#+#)' ex; (2d6+2)</br>
        If it's detected in an Action description, it should create a roller button.</br></br>
        <b>CustomEntity</b> </br>
        {</br>
            unitName: string;</br> 
            initiative: number;</br> 
            currentHP: number;</br> 
            maxHP: number;</br> 
            armorClass: number;</br> 
        
            unitType: string;</br> 
            unitSize: string;</br> 
        
            strScore: number;</br> 
            strSave: number;</br> 
        
            dexScore: number;</br> 
            dexSave: number;</br> 
        
            conScore: number;</br> 
            conSave: number;</br> 
        
            intScore: number;</br> 
            intSave: number;</br> 
        
            wisScore: number;</br> 
            wisSave: number;</br> 
        
            chaScore: number;</br> 
            chaSave: number;</br> 
        
            damageVulnerabilities: string;</br> 
            damageImmunities: string;</br> 
            damageResistances: string;</br> 
            conditionImmunities: string;</br> 
        
            challengeRating: string;</br> 
            experiencePoints: number;</br> 
            alignment: string;</br> 
        
            standardActions: ActionsEntity[];</br> 
            legendaryActions?: ActionsEntity[];</br> 
            specialAbilities?: ActionsEntity[];</br> 
            spellActions?: ActionsEntity[];</br> 
            reactions?: ActionsEntity[];</br> 
        
            senses: string;</br> 
            languages: string;</br> 
        
            speedWalk: number;</br> 
            speedFly: number;</br> 
            speedClimb: number;</br> 
            speedBurrow: number;</br> 
            speedSwim: number;</br> 

            dataSlug: string;</br>
        }`}exampleTypesString(){return`      
        <b>ActionsEntity</b> </br>
        {   name?: string;</br>
          desc?: string;</br>   }</br>
        `}AppendImportUnitButton(){var e=this;const n=document.getElementById("footerButtonContainer"),t=document.createElement("input");t.type="button",t.id="gotoMonsterSearchButton",t.value="Search Monster Data",t.className="chalkBorder",t.style.marginRight="4px",t.title="Search Monster Data from Free Open5e",t.onclick=async function(){e.ShowSubMenu(!1),e.ShowSearchMenu(!0),e.renderSearchForm(document)},n?.appendChild(t)}AppendJSONButton(){var e=this;const n=document.getElementById("footerButtonContainer"),t=document.createElement("input");t.type="button",t.id="gotoImportMonsterButton",t.value="Import Custom JSON",t.className="chalkBorder",t.style.marginLeft="4px",t.title="Import Custom Monster JSON Data",t.onclick=async function(){e.ShowSubMenu(!1),e.ShowImportJSONMenu(!0),e.renderCustomImportForm(document)},n?.appendChild(t)}AppendUnitSaveButton(){var e=this;const n=document.getElementById("buttonContainer"),t=document.createElement("input");t.type="image",t.id="saveButton",t.className="clickable",t.onclick=async function(){if(e.currentUnit.ImportCustomFormInputs(document),e.multiSheet){const i=e.currentUnit.unitName;let s=[];for(var a=0,r;r=e.multiIds[a];a++){e.currentUnit.id=r,e.currentUnit.tokenId=r,e.currentUnit.isActive=e.multiActive[a]==="true"?1:0,e.currentUnit.unitName=i+` ${String.fromCharCode("A".charCodeAt(0)+a)}`;const o=JSON.stringify(e.currentUnit),v=JSON.parse(o);s.push(v)}await C.scene.items.updateItems(o=>o.id===s.find(v=>v.id===o.id)?.id,o=>{for(let v of o)v.text.plainText=s.find(f=>f.id===v.id).unitName}),await N.ActiveEncounter.bulkPut(s)}else await N.ActiveEncounter.put(e.currentUnit,e.POPOVERSUBMENUID),console.log(C.isReady),await C.scene.items.updateItems(i=>i.id==e.currentUnit.id,i=>{for(let s of i)s.text.plainText=e.currentUnit.unitName})},t.src="/save.svg",t.title="Save Changes",t.height=20,t.width=20,n?.appendChild(t)}AppendFavoriteButton(){var e=this;const n=document.getElementById("buttonContainer"),t=document.createElement("input");t.type="image",t.id="favoriteButton",t.value="false",t.className="clickable",t.onclick=async function(){const a=document.getElementById("collectionButton");t.value=="false"?(t.value="true",t.src="/favorite.svg",t.className="clickable favorite",a.className="clickable favorite",a.title="Save to Collection & Favorite",e.favorite=!0):(t.value="false",t.src="/favoriteline.svg",t.className="clickable",a.className="clickable",a.title="Save to Collection",e.favorite=!1)},t.src="/favoriteline.svg",t.title="Toggle Favorite on Export",t.height=20,t.width=20,n?.appendChild(t)}AppendCollectionSaveButton(){var e=this;const n=document.getElementById("buttonContainer"),t=document.createElement("input");t.type="image",t.id="collectionButton",t.className="clickable",t.onclick=async function(){e.currentUnit.ImportCustomFormInputs(document);const a=await C.player.getName();let r=JSON.parse(JSON.stringify(e.currentUnit));r.id="",r.tokenId="",r.dataSlug=a;const i=await N.Creatures.get({unitName:e.currentUnit.unitName,dataSlug:a});if(i)confirm(`Unit named '${e.currentUnit.unitName}' already found in Collection. Overwrite?`)&&(r.id=i.id,r.favorite=e.favorite,await N.Creatures.put(r,i.id));else{const s=x();r.id=s,r.favorite=e.favorite,await N.Creatures.put(r,s)}},t.src="/collection.svg",t.title="Save to Collection",t.height=20,t.width=20,n?.appendChild(t)}AppendUnitExportButton(){var e=this;const n=document.getElementById("buttonContainer"),t=document.createElement("input");t.type="image",t.id="exportButton",t.className="clickable",t.onclick=async function(){e.currentUnit.ImportCustomFormInputs(document),e.currentUnit.id="",e.currentUnit.tokenId="";try{await navigator.clipboard.writeText(JSON.stringify(e.currentUnit)),window.alert("JSON Copied to clipboard.")}catch{window.alert("Unable to copy; Please try again.")}},t.src="/export.svg",t.title="Export to JSON",t.height=20,t.width=20,n?.appendChild(t)}AppendAddActionButtons(){const e=document.getElementById("addLegendaryButtonContainer"),n=document.createElement("input");n.type="image",n.id="addButton",n.title="Add new Legendary Action",n.className="clickable",n.onclick=async function(){const g=document.getElementById("formLegendaryCollection"),c=`<div id="formLegendaryContainer" class="Legendary"><span id="formLegendaryName" class="legendaryname" contentEditable="true">Legend-Name.</span>.
                <span id="formLegendaryDesc" class="description" contentEditable="true">Legend-Desc</span></div>`;g.insertAdjacentHTML("beforeend",c)},n.src="/add.svg",n.height=20,n.width=20,e?.appendChild(n);const t=document.getElementById("addReactionButtonContainer"),a=document.createElement("input");a.type="image",a.id="addButton",a.title="Add new Reaction",a.className="clickable",a.onclick=async function(){const g=document.getElementById("formReactionCollection"),c=`<div id="formReactionContainer" class="Reaction"><span id="formReactionName" class="reactionname" contentEditable="true">React-Name.</span>.
                <span id="formReactionDesc" class="description" contentEditable="true">React-Desc</span></div>`;g.insertAdjacentHTML("beforeend",c)},a.src="/add.svg",a.height=20,a.width=20,t?.appendChild(a);const r=document.getElementById("addAttackButtonContainer"),i=document.createElement("input");i.type="image",i.id="addButton",i.title="Add new Attack",i.className="clickable",i.onclick=async function(){const g=document.getElementById("formAttackCollection"),c=`<div id="formAttackContainer" class="attack"><span id="formAttackName" class="attackname" contentEditable="true">Atk-Name.</span>.
                <span id="formAttackDesc" class="description" contentEditable="true">Atk-Desc</span></div>`;g.insertAdjacentHTML("beforeend",c)},i.src="/add.svg",i.height=20,i.width=20,r?.appendChild(i);const s=document.getElementById("addAbilityButtonContainer"),o=document.createElement("input");o.type="image",o.id="addButton",o.className="clickable",o.title="Add new Ability",o.onclick=async function(){const g=document.getElementById("formAbilityCollection"),c=`<div id="formAbilityContainer" class="ability"><span id="formAbilityName" class="abilityname" contentEditable="true">Act-Name.</span>.
                <span id="formAbilityDesc" class="description" contentEditable="true">Act-Desc</span></div>`;g.insertAdjacentHTML("beforeend",c)},o.src="/add.svg",o.height=20,o.width=20,s?.appendChild(o);const v=document.getElementById("addSpellButtonContainer"),f=document.createElement("input");f.type="image",f.id="addButton",f.title="Add new Spell",f.className="clickable",f.onclick=async function(){const g=document.getElementById("formSpellCollection"),c=`<div id="formSpellContainer" class="spell"><span id="formSpellName" class="spellname" contentEditable="true">Spell-Name.</span>.
                <span id="formSpellDesc" class="description" contentEditable="true">Spell-Desc</span></div>`;g.insertAdjacentHTML("beforeend",c)},f.src="/add.svg",f.height=20,f.width=20,v?.appendChild(f)}ShowSubMenu(e){const n=document.querySelector("#submenu");n.hidden=!e}ShowSearchMenu(e){const n=document.querySelector("#searchmenu");n.hidden=!e}ShowImportJSONMenu(e){const n=document.querySelector("#importjsonmenu");n.hidden=!e}async ImportNewMonsterInfo(e){await fetch(`https://api.open5e.com/monsters/${e}/?format=json`).then(function(n){return n.json()}).then(async function(n){let t=new L(I.POPOVERSUBMENUID);const a=document.querySelector("#monsterList");a.innerHTML='<div class="superCenter">Loading...</div>',await t.ImportOpen5eResponse(n),t.isActive=I.currentUnit.isActive,t.currentHP=t.maxHP,I.freshImport=!0,I.currentUnit=t,I.renderUnitInfo(document)})}async ImportCollectionMonsterInfo(e){const n=await N.Creatures.get(e);n&&(I.freshImport=!0,I.currentUnit.SetToModel(n),I.renderUnitInfo(document))}async DeleteCollectionMonsterInfo(e){const n=e.substring(4);await N.Creatures.delete(n),document.getElementById(`listItem-${n}`)?.remove()}SetClassOnRollable(e){let n="";return n=e.replaceAll(U.PARENTHESESMATCH,"<span class='clickableRollerDmg' contenteditable='false'>($1)</span>"),n=n.replaceAll(U.PLUSMATCH,"<span class='clickableRollerAtk' contenteditable='false'> $1 </span>"),n}async SendtoChatLog(e){const t=(await N.Settings.get(U.SETTINGSID))?.gmRumbleLog?this.userId:"0000",a=new Date().toISOString(),r={};return r[`${U.EXTENSIONID}/metadata_chatlog`]={chatlog:e,sender:"Clash!",targetId:t,created:a,color:"#ff9294"},await C.scene.setMetadata(r)}}const I=new H;I.renderUnitInfo(document);
